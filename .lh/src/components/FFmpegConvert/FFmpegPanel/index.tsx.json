{
    "sourceFile": "src/components/FFmpegConvert/FFmpegPanel/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1748099272713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748100884247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n     selectedOperations,\r\n     paramValues,\r\n     setSelectedOperations,\r\n     setParamValues,\r\n+    setHasParamConflicts,\r\n   } = useFFmpegPanelStore();\r\n \r\n   // 使用抽离的模板管理hook\r\n   const {\r\n@@ -95,8 +96,9 @@\n     }\r\n \r\n     // 参数名冲突检测 (保留)\r\n     const conflicts = getParamNameConflicts(newOps);\r\n+    setHasParamConflicts(conflicts.length > 0);\r\n     if (conflicts.length > 0) {\r\n       // 这里只显示冲突信息，但不阻止选择，让用户自行决定\r\n       console.warn(\"参数名冲突:\", conflicts);\r\n     }\r\n"
                },
                {
                    "date": 1748101048188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,14 +2,17 @@\n \r\n import { Alert, Button, Card, Checkbox, Col, Divider, Form, Row } from \"antd\";\r\n import { FFmpegOperationType, ParamValues } from \"./types\";\r\n import React, { useEffect } from \"react\";\r\n+import {\r\n+  doesAddingOperationCauseConflict,\r\n+  getParamNameConflicts,\r\n+} from \"./utils\";\r\n \r\n import { OPERATION_SCHEMAS } from \"./schemas\";\r\n import OperationParametersFormItems from \"./components/OperationParametersFormItems\";\r\n import RenameTemplateModal from \"./components/RenameTemplateModal\";\r\n import TemplateManagementModal from \"./components/TemplateManagementModal\";\r\n-import { getParamNameConflicts } from \"./utils\";\r\n import { useFFmpegPanelStore } from \"../store\";\r\n import useTemplateManagement from \"./hooks/useTemplateManagement\";\r\n \r\n const FFmpegPanel: React.FC = () => {\r\n@@ -57,19 +60,65 @@\n   ];\r\n   const formatConvertOp: FFmpegOperationType = \"convert\";\r\n   const audioOps: FFmpegOperationType[] = [\"extract-audio\", \"volume\"];\r\n \r\n+  // 根据当前选择的操作，计算哪些其他操作会导致冲突或与格式转换互斥\r\n+  const getDisabledOperations = () => {\r\n+    const disabledOps: FFmpegOperationType[] = [];\r\n+\r\n+    const isConvertSelected = selectedOperations.includes(formatConvertOp);\r\n+\r\n+    videoProcessOps.forEach(op => {\r\n+      // 如果已选择格式转换，禁用所有视频处理操作\r\n+      if (isConvertSelected) {\r\n+        disabledOps.push(op);\r\n+      } else {\r\n+        // 如果未选择格式转换，检查添加当前视频操作是否会导致冲突\r\n+        const potentialOps = [...selectedOperations, op];\r\n+        const conflicts = getParamNameConflicts(potentialOps);\r\n+        if (conflicts.length > 0) {\r\n+           // Check if the current op is involved in any conflict\r\n+           const opParams = OPERATION_SCHEMAS[op]?.params || [];\r\n+           const opParamNames = new Set(opParams.map(p => p.name));\r\n+           for (const [paramName, conflictOps] of conflicts) {\r\n+               if (opParamNames.has(paramName) && conflictOps.includes(OPERATION_SCHEMAS[op].label)){\r\n+                   disabledOps.push(op);\r\n+                   break; // Found a conflict involving this op, disable and move to next op\r\n+               }\r\n+           }\r\n+        }\r\n+      }\r\n+    });\r\n+\r\n+    // 格式转换操作：如果已经选择了任何视频处理或音频操作，则禁用格式转换\r\n+    if (selectedOperations.some(op => videoProcessOps.includes(op) || audioOps.includes(op)) && !isConvertSelected) {\r\n+        disabledOps.push(formatConvertOp);\r\n+    }\r\n+\r\n+    audioOps.forEach(op => {\r\n+      // 检查添加当前音频操作是否会导致冲突 (与已选操作或格式转换) - 目前音频操作参数名不冲突\r\n+      // 如果将来有冲突，需要类似视频处理的逻辑\r\n+    });\r\n+\r\n+    return disabledOps;\r\n+  };\r\n+\r\n+  const disabledOperations = getDisabledOperations();\r\n+\r\n   const videoProcessOptions = videoProcessOps.map((op) => ({\r\n     label: OPERATION_SCHEMAS[op].label,\r\n     value: op,\r\n+    disabled: disabledOperations.includes(op),\r\n   }));\r\n   const formatConvertOption = {\r\n     label: OPERATION_SCHEMAS[formatConvertOp].label,\r\n     value: formatConvertOp,\r\n+    disabled: disabledOperations.includes(formatConvertOp),\r\n   };\r\n   const audioOptions = audioOps.map((op) => ({\r\n     label: OPERATION_SCHEMAS[op].label,\r\n     value: op,\r\n+    disabled: disabledOperations.includes(op),\r\n   }));\r\n \r\n   // 视觉顺序：视频处理、格式转换、音频\r\n   const getVisualSelectedOperations = () => {\r\n@@ -188,8 +237,9 @@\n                     selectedOperations.filter((op) => op !== formatConvertOp)\r\n                   );\r\n                 }\r\n               }}\r\n+              disabled={disabledOperations.includes(formatConvertOp)}\r\n             >\r\n               {formatConvertOption.label}\r\n             </Checkbox>\r\n           </Col>\r\n"
                },
                {
                    "date": 1748101057724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,17 +2,16 @@\n \r\n import { Alert, Button, Card, Checkbox, Col, Divider, Form, Row } from \"antd\";\r\n import { FFmpegOperationType, ParamValues } from \"./types\";\r\n import React, { useEffect } from \"react\";\r\n-import {\r\n-  doesAddingOperationCauseConflict,\r\n-  getParamNameConflicts,\r\n-} from \"./utils\";\r\n \r\n import { OPERATION_SCHEMAS } from \"./schemas\";\r\n import OperationParametersFormItems from \"./components/OperationParametersFormItems\";\r\n import RenameTemplateModal from \"./components/RenameTemplateModal\";\r\n import TemplateManagementModal from \"./components/TemplateManagementModal\";\r\n+import {\r\n+  getParamNameConflicts,\r\n+} from \"./utils\";\r\n import { useFFmpegPanelStore } from \"../store\";\r\n import useTemplateManagement from \"./hooks/useTemplateManagement\";\r\n \r\n const FFmpegPanel: React.FC = () => {\r\n@@ -101,13 +100,8 @@\n     ) {\r\n       disabledOps.push(formatConvertOp);\r\n     }\r\n \r\n-    audioOps.forEach((op) => {\r\n-      // 检查添加当前音频操作是否会导致冲突 (与已选操作或格式转换) - 目前音频操作参数名不冲突\r\n-      // 如果将来有冲突，需要类似视频处理的逻辑\r\n-    });\r\n-\r\n     return disabledOps;\r\n   };\r\n \r\n   const disabledOperations = getDisabledOperations();\r\n"
                },
                {
                    "date": 1748101134836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,43 +63,54 @@\n     const disabledOps: FFmpegOperationType[] = [];\r\n \r\n     const isConvertSelected = selectedOperations.includes(formatConvertOp);\r\n \r\n-    videoProcessOps.forEach((op) => {\r\n-      // 如果已选择格式转换，禁用所有视频处理操作\r\n-      if (isConvertSelected) {\r\n+    // 如果已选择格式转换，禁用所有视频处理操作\r\n+    if (isConvertSelected) {\r\n+      videoProcessOps.forEach(op => {\r\n         disabledOps.push(op);\r\n-      } else {\r\n-        // 如果未选择格式转换，检查添加当前视频操作是否会导致冲突\r\n-        const potentialOps = [...selectedOperations, op];\r\n+      });\r\n+    } else {\r\n+      // 如果未选择格式转换，遍历视频处理操作检查冲突\r\n+      videoProcessOps.forEach(op => {\r\n+        // 检查将当前操作添加到已选操作中是否会引起冲突\r\n+        // 已选操作中排除当前正在检查的 op，因为检查的是\"添加\"是否引起冲突\r\n+        const otherSelectedOps = selectedOperations.filter(item => item !== op && item !== formatConvertOp && !audioOps.includes(item));\r\n+        const potentialOps = [...otherSelectedOps, op];\r\n         const conflicts = getParamNameConflicts(potentialOps);\r\n         if (conflicts.length > 0) {\r\n-          // Check if the current op is involved in any conflict\r\n-          const opParams = OPERATION_SCHEMAS[op]?.params || [];\r\n-          const opParamNames = new Set(opParams.map((p) => p.name));\r\n-          for (const [paramName, conflictOps] of conflicts) {\r\n-            if (\r\n-              opParamNames.has(paramName) &&\r\n-              conflictOps.includes(OPERATION_SCHEMAS[op].label)\r\n-            ) {\r\n-              disabledOps.push(op);\r\n-              break; // Found a conflict involving this op, disable and move to next op\r\n-            }\r\n-          }\r\n+           // Check if the current op is involved in any newly created conflict\r\n+           const opParams = OPERATION_SCHEMAS[op]?.params || [];\r\n+           const opParamNames = new Set(opParams.map(p => p.name));\r\n+           for (const [paramName, conflictOps] of conflicts) {\r\n+               // Check if the conflict involves a parameter of the current op AND another operation that was already selected\r\n+               if (opParamNames.has(paramName) && conflictOps.some(label => otherSelectedOps.map(otherOp => OPERATION_SCHEMAS[otherOp].label).includes(label)) && conflictOps.includes(OPERATION_SCHEMAS[op].label)){\r\n+                   disabledOps.push(op);\r\n+                   break; // Found a conflict involving this op and an already selected op, disable and move to next op\r\n+               }\r\n+           }\r\n         }\r\n-      }\r\n-    });\r\n+      });\r\n+    }\r\n \r\n-    // 格式转换操作：如果已经选择了任何视频处理或音频操作，则禁用格式转换\r\n-    if (\r\n-      selectedOperations.some(\r\n-        (op) => videoProcessOps.includes(op) || audioOps.includes(op)\r\n-      ) &&\r\n-      !isConvertSelected\r\n-    ) {\r\n-      disabledOps.push(formatConvertOp);\r\n+    // 格式转换操作：如果已经选择了任何视频处理操作，则禁用格式转换\r\n+    if (selectedOperations.some(op => videoProcessOps.includes(op)) && !isConvertSelected) {\r\n+        disabledOps.push(formatConvertOp);\r\n     }\r\n \r\n+    // 音频操作：目前假设音频操作之间以及音频操作与非格式转换的视频操作之间没有参数命名冲突\r\n+    // 如果将来有冲突，需要添加类似视频处理的逻辑\r\n+    audioOps.forEach(op => {\r\n+       // 如果已选择格式转换，检查音频操作是否与格式转换参数冲突 (目前没有冲突)\r\n+       if (isConvertSelected) {\r\n+         // Check for conflict with convert op if needed\r\n+       }\r\n+       // 如果未选择格式转换，检查音频操作是否与已选视频处理操作冲突 (目前没有冲突)\r\n+       else {\r\n+         // Check for conflict with selected video ops if needed\r\n+       }\r\n+    });\r\n+\r\n     return disabledOps;\r\n   };\r\n \r\n   const disabledOperations = getDisabledOperations();\r\n"
                }
            ],
            "date": 1748099272713,
            "name": "Commit-0",
            "content": "import \"./styles/style.less\";\r\n\r\nimport { Alert, Button, Card, Checkbox, Col, Divider, Form, Row } from \"antd\";\r\nimport { FFmpegOperationType, ParamValues } from \"./types\";\r\nimport React, { useEffect } from \"react\";\r\n\r\nimport { OPERATION_SCHEMAS } from \"./schemas\";\r\nimport OperationParametersFormItems from \"./components/OperationParametersFormItems\";\r\nimport RenameTemplateModal from \"./components/RenameTemplateModal\";\r\nimport TemplateManagementModal from \"./components/TemplateManagementModal\";\r\nimport { getParamNameConflicts } from \"./utils\";\r\nimport { useFFmpegPanelStore } from \"../store\";\r\nimport useTemplateManagement from \"./hooks/useTemplateManagement\";\r\n\r\nconst FFmpegPanel: React.FC = () => {\r\n  const [form] = Form.useForm();\r\n  const {\r\n    selectedOperations,\r\n    paramValues,\r\n    setSelectedOperations,\r\n    setParamValues,\r\n  } = useFFmpegPanelStore();\r\n\r\n  // 使用抽离的模板管理hook\r\n  const {\r\n    modalOpen,\r\n    setModalOpen,\r\n    editingTemplateId,\r\n    newTplName,\r\n    setNewTplName,\r\n    renameModalOpen,\r\n    renamingTemplate,\r\n    newTemplateName,\r\n    setNewTemplateName,\r\n    templates,\r\n    handleCreateTemplate,\r\n    handleUpdateTemplate,\r\n    handleSaveTemplate,\r\n    handleOpenRenameModal,\r\n    handleRenameCancel,\r\n    handleRenameSave,\r\n    deleteTemplate,\r\n    applyTemplate,\r\n  } = useTemplateManagement({ form, selectedOperations, paramValues });\r\n\r\n  // 定义操作类型分组和对应的Antd Checkbox options\r\n  const videoProcessOps: FFmpegOperationType[] = [\r\n    \"scale\",\r\n    \"compress\",\r\n    \"crop\",\r\n    \"clip-segment\",\r\n    \"watermark\",\r\n    \"framerate\",\r\n    \"gif\",\r\n    \"cover\",\r\n  ];\r\n  const formatConvertOp: FFmpegOperationType = \"convert\";\r\n  const audioOps: FFmpegOperationType[] = [\"extract-audio\", \"volume\"];\r\n\r\n  const videoProcessOptions = videoProcessOps.map((op) => ({\r\n    label: OPERATION_SCHEMAS[op].label,\r\n    value: op,\r\n  }));\r\n  const formatConvertOption = {\r\n    label: OPERATION_SCHEMAS[formatConvertOp].label,\r\n    value: formatConvertOp,\r\n  };\r\n  const audioOptions = audioOps.map((op) => ({\r\n    label: OPERATION_SCHEMAS[op].label,\r\n    value: op,\r\n  }));\r\n\r\n  // 视觉顺序：视频处理、格式转换、音频\r\n  const getVisualSelectedOperations = () => {\r\n    const video = videoProcessOps.filter((v) => selectedOperations.includes(v));\r\n    const format = selectedOperations.includes(formatConvertOp)\r\n      ? [formatConvertOp]\r\n      : [];\r\n    const audio = audioOps.filter((a) => selectedOperations.includes(a));\r\n    return [...video, ...format, ...audio];\r\n  };\r\n\r\n  // 处理操作类型多选 (包含互斥和参数名冲突检测)\r\n  const handleOperationChange = (ops: Array<FFmpegOperationType>) => {\r\n    let newOps = [...ops];\r\n\r\n    // 格式转换互斥逻辑\r\n    if (newOps.includes(formatConvertOp)) {\r\n      newOps = [formatConvertOp, ...audioOps.filter((a) => newOps.includes(a))];\r\n    } else {\r\n      newOps = [\r\n        ...videoProcessOps.filter((v) => newOps.includes(v)),\r\n        ...audioOps.filter((a) => newOps.includes(a)),\r\n      ];\r\n    }\r\n\r\n    // 参数名冲突检测 (保留)\r\n    const conflicts = getParamNameConflicts(newOps);\r\n    if (conflicts.length > 0) {\r\n      // 这里只显示冲突信息，但不阻止选择，让用户自行决定\r\n      console.warn(\"参数名冲突:\", conflicts);\r\n    }\r\n\r\n    setSelectedOperations(newOps);\r\n\r\n    // **新增逻辑：根据新的选中操作和当前值，计算并应用默认值**\r\n    const updatedParamValues: ParamValues = { ...paramValues }; // 保留现有参数值\r\n    newOps.forEach((op) => {\r\n      if (!updatedParamValues[op]) {\r\n        updatedParamValues[op] = {}; // 如果新操作没有对应的参数对象，则创建一个\r\n      }\r\n      const params = OPERATION_SCHEMAS[op]?.params || [];\r\n      params.forEach((param) => {\r\n        // 如果参数在当前paramValues中没有值，且schema中有默认值，则设置默认值\r\n        if (\r\n          updatedParamValues[op][param.name] === undefined &&\r\n          param.defaultValue !== undefined\r\n        ) {\r\n          updatedParamValues[op][param.name] = param.defaultValue;\r\n        }\r\n      });\r\n    });\r\n\r\n    setParamValues(updatedParamValues);\r\n    form.setFieldsValue(updatedParamValues); // 同步到表单\r\n  };\r\n\r\n  // 处理参数表单变更\r\n  const handleValuesChange = (_changed: ParamValues, all: ParamValues) => {\r\n    setParamValues(all);\r\n  };\r\n\r\n  // 表单初始值同步和默认值设置\r\n  useEffect(() => {\r\n    // 组件加载时，如果paramValues为空，根据初始选中的操作设置默认值\r\n    if (\r\n      Object.keys(paramValues).length === 0 &&\r\n      selectedOperations.length > 0\r\n    ) {\r\n      const initialParamValues: ParamValues = {};\r\n      selectedOperations.forEach((op) => {\r\n        initialParamValues[op] = {};\r\n        const params = OPERATION_SCHEMAS[op]?.params || [];\r\n        params.forEach((param) => {\r\n          if (param.defaultValue !== undefined) {\r\n            initialParamValues[op][param.name] = param.defaultValue;\r\n          }\r\n        });\r\n      });\r\n      setParamValues(initialParamValues);\r\n    } else {\r\n      form.setFieldsValue(paramValues);\r\n    }\r\n  }, [paramValues, form, selectedOperations, setParamValues]);\r\n\r\n  const visualSelectedOperations = getVisualSelectedOperations();\r\n  const paramNameConflicts = getParamNameConflicts(visualSelectedOperations);\r\n\r\n  return (\r\n    <Card className=\"ffmpeg-panel\" title=\"FFmpeg 操作与配置\">\r\n      <div style={{ marginBottom: 16 }}>\r\n        <Row gutter={32} align=\"top\">\r\n          <Col span={12}>\r\n            <div style={{ fontWeight: \"bold\", marginBottom: 4 }}>视频操作</div>\r\n            <Checkbox.Group\r\n              options={videoProcessOptions}\r\n              value={selectedOperations}\r\n              onChange={handleOperationChange}\r\n              style={{ display: \"flex\", flexDirection: \"column\" }}\r\n              disabled={selectedOperations.includes(formatConvertOp)} // 选中格式转换后禁用视频处理\r\n            />\r\n            <Divider style={{ margin: \"16px 0 8px 0\" }} />\r\n            <div style={{ fontWeight: \"bold\", marginBottom: 4 }}>格式转换</div>\r\n            <Checkbox\r\n              checked={selectedOperations.includes(formatConvertOp)}\r\n              onChange={(e) => {\r\n                if (e.target.checked) {\r\n                  // 格式转换互斥：只保留格式转换和音频操作\r\n                  handleOperationChange([\r\n                    formatConvertOp,\r\n                    ...selectedOperations.filter((op) => audioOps.includes(op)),\r\n                  ]);\r\n                } else {\r\n                  // 移除格式转换后，保留视频处理和音频操作\r\n                  handleOperationChange(\r\n                    selectedOperations.filter((op) => op !== formatConvertOp)\r\n                  );\r\n                }\r\n              }}\r\n            >\r\n              {formatConvertOption.label}\r\n            </Checkbox>\r\n          </Col>\r\n          <Col span={12}>\r\n            <div style={{ fontWeight: \"bold\", marginBottom: 4 }}>音频操作</div>\r\n            <Checkbox.Group\r\n              options={audioOptions}\r\n              value={selectedOperations}\r\n              onChange={handleOperationChange}\r\n              style={{ display: \"flex\", flexDirection: \"column\" }}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Button\r\n          type=\"primary\"\r\n          style={{ marginTop: 8, marginRight: 8 }}\r\n          onClick={handleSaveTemplate} // 使用hook中的函数\r\n        >\r\n          模板\r\n        </Button>\r\n      </div>\r\n      <Form\r\n        layout=\"vertical\"\r\n        form={form}\r\n        initialValues={paramValues}\r\n        onValuesChange={handleValuesChange}\r\n      >\r\n        {/* 使用抽离的参数表单项组件 */}\r\n        <OperationParametersFormItems\r\n          visualSelectedOperations={visualSelectedOperations}\r\n        />\r\n        <Divider />\r\n        {/* 参数名冲突提示 */}\r\n        {paramNameConflicts.length > 0 && (\r\n          <Alert\r\n            message={\r\n              <span>\r\n                存在参数名冲突：\r\n                {paramNameConflicts.map(([name, arr]) => (\r\n                  <span key={name} style={{ marginLeft: 8 }}>\r\n                    <b>{name}</b>（{arr.join(\"、\")}）\r\n                  </span>\r\n                ))}\r\n                ，请注意参数不会互相覆盖。\r\n              </span>\r\n            }\r\n            type=\"warning\"\r\n            showIcon\r\n            style={{ marginBottom: 16 }}\r\n          />\r\n        )}\r\n      </Form>\r\n      {/* 使用抽离的模板管理模态框组件 */}\r\n      <TemplateManagementModal\r\n        modalOpen={modalOpen}\r\n        setModalOpen={setModalOpen}\r\n        templates={templates}\r\n        editingTemplateId={editingTemplateId}\r\n        newTplName={newTplName}\r\n        setNewTplName={setNewTplName}\r\n        handleCreateTemplate={handleCreateTemplate}\r\n        handleUpdateTemplate={handleUpdateTemplate}\r\n        handleOpenRenameModal={handleOpenRenameModal}\r\n        deleteTemplate={deleteTemplate}\r\n        applyTemplate={applyTemplate}\r\n        isSaveDisabled={selectedOperations.length === 0} // 传递disabled状态\r\n      />\r\n\r\n      {/* 使用抽离的重命名模板模态框组件 */}\r\n      <RenameTemplateModal\r\n        renameModalOpen={renameModalOpen}\r\n        handleRenameCancel={handleRenameCancel}\r\n        handleRenameSave={handleRenameSave}\r\n        renamingTemplate={renamingTemplate}\r\n        newTemplateName={newTemplateName}\r\n        setNewTemplateName={setNewTemplateName}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default FFmpegPanel;\r\n"
        }
    ]
}