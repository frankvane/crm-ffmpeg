{
    "sourceFile": "src/components/FFmpegConvert/FFmpegList/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1748098884987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748099293837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { List, Radio, Space, Typography } from \"antd\";\r\n import React, { useEffect } from \"react\";\r\n \r\n import styles from \"./style.module.less\";\r\n-import { useFFmpegPanelStore } from \"../../FFmpegPanel/store\"; // 引入FFmpegPanel store\r\n+import { useFFmpegPanelStore } from \"../store\"; // 更新导入路径\r\n \r\n // import { useFFmpegListStore } from \"./store\"; // 移除对FFmpegList store的引入\r\n \r\n const { Text } = Typography;\r\n"
                },
                {
                    "date": 1748099301184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \r\n const { Text } = Typography;\r\n \r\n const FFmpegList: React.FC = () => {\r\n-  const { templates, selectedTemplateId, loadTemplates, selectTemplate } =\r\n+  const { templates, selectedTemplateId, selectTemplate } =\r\n     // useFFmpegListStore(); // 使用FFmpegPanel store\r\n     useFFmpegPanelStore();\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1748262666599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,27 @@\n import { List, Radio, Space, Typography } from \"antd\";\r\n import React, { useEffect } from \"react\";\r\n \r\n+import { FFmpegTemplate } from \"../FFmpegPanel/types\";\r\n import styles from \"./style.module.less\";\r\n import { useFFmpegPanelStore } from \"../store\"; // 更新导入路径\r\n \r\n // import { useFFmpegListStore } from \"./store\"; // 移除对FFmpegList store的引入\r\n \r\n const { Text } = Typography;\r\n \r\n-const FFmpegList: React.FC = () => {\r\n-  const { templates, selectedTemplateId, selectTemplate } =\r\n-    // useFFmpegListStore(); // 使用FFmpegPanel store\r\n-    useFFmpegPanelStore();\r\n+interface FFmpegListProps {\r\n+  templates?: FFmpegTemplate[];\r\n+}\r\n \r\n+const FFmpegList: React.FC<FFmpegListProps> = ({ templates }) => {\r\n+  const store = useFFmpegPanelStore();\r\n+  const { selectedTemplateId, selectTemplate } = store;\r\n+  const tplList = templates || store.templates;\r\n+\r\n   useEffect(() => {\r\n-    // Load templates when the component mounts\r\n-    // 注意：useFFmpegPanelStore中没有loadTemplates方法，需要调整或手动加载\r\n-    // 暂时不调用loadTemplates，假设App.tsx或其他地方已经加载了模板\r\n-    // loadTemplates(); // 移除loadTemplates调用，因为FFmpegPanel store中没有这个action\r\n-    // 如果FFmpegPanelStore需要加载模板，可以在这里触发，但这取决于您的设计\r\n-    // 例如：getTemplates(); // 假设FFmpegPanelStore有一个getTemplates action\r\n-  }, []); // 依赖项列表清空，避免无限循环\r\n+    // 预留加载逻辑\r\n+  }, []);\r\n \r\n   const handleSelectTemplate = (templateId: string | null) => {\r\n     selectTemplate(templateId);\r\n     // TODO: Potentially update FFmpegPanel's state with selected template's operations and parameters\r\n@@ -36,9 +36,9 @@\n   return (\r\n     <div className={styles.ffmpegListContainer}>\r\n       <h2>FFmpeg 模板列表 (单选)</h2>\r\n       <List\r\n-        dataSource={templates}\r\n+        dataSource={tplList}\r\n         renderItem={(template) => (\r\n           <List.Item\r\n             actions={[\r\n               <Radio\r\n"
                },
                {
                    "date": 1748262690820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,8 @@\n   // TODO: 在FFmpegPanel store中添加selectedTemplateId和selectTemplate action\r\n \r\n   return (\r\n     <div className={styles.ffmpegListContainer}>\r\n-      <h2>FFmpeg 模板列表 (单选)</h2>\r\n       <List\r\n         dataSource={tplList}\r\n         renderItem={(template) => (\r\n           <List.Item\r\n"
                },
                {
                    "date": 1748265072171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,13 @@\n   return (\r\n     <div className={styles.ffmpegListContainer}>\r\n       <List\r\n         dataSource={tplList}\r\n+        pagination={{\r\n+          pageSize: 5,\r\n+          showSizeChanger: true,\r\n+          pageSizeOptions: [\"5\", \"10\", \"20\", \"50\"],\r\n+        }}\r\n         renderItem={(template) => (\r\n           <List.Item\r\n             actions={[\r\n               <Radio\r\n"
                },
                {
                    "date": 1748265100923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,21 @@\n         pagination={{\r\n           pageSize: 5,\r\n           showSizeChanger: true,\r\n           pageSizeOptions: [\"5\", \"10\", \"20\", \"50\"],\r\n+          showTotal: (total, range) =>\r\n+            `第${range[0]}-${range[1]}条，共${total}条`,\r\n+          locale: {\r\n+            items_per_page: \"条/页\",\r\n+            jump_to: \"跳至\",\r\n+            jump_to_confirm: \"确定\",\r\n+            next_page: \"下一页\",\r\n+            prev_page: \"上一页\",\r\n+            prev_5: \"向前 5 页\",\r\n+            next_5: \"向后 5 页\",\r\n+            prev_3: \"向前 3 页\",\r\n+            next_3: \"向后 3 页\",\r\n+          },\r\n         }}\r\n         renderItem={(template) => (\r\n           <List.Item\r\n             actions={[\r\n"
                },
                {
                    "date": 1748265161758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,89 @@\n+import { List, Radio, Space, Typography } from \"antd\";\r\n+import React, { useEffect } from \"react\";\r\n+\r\n+import { FFmpegTemplate } from \"../FFmpegPanel/types\";\r\n+import styles from \"./style.module.less\";\r\n+import { useFFmpegPanelStore } from \"../store\"; // 更新导入路径\r\n+\r\n+// import { useFFmpegListStore } from \"./store\"; // 移除对FFmpegList store的引入\r\n+\r\n+const { Text } = Typography;\r\n+\r\n+interface FFmpegListProps {\r\n+  templates?: FFmpegTemplate[];\r\n+}\r\n+\r\n+const FFmpegList: React.FC<FFmpegListProps> = ({ templates }) => {\r\n+  const store = useFFmpegPanelStore();\r\n+  const { selectedTemplateId, selectTemplate } = store;\r\n+  const tplList = templates || store.templates;\r\n+\r\n+  useEffect(() => {\r\n+    // 预留加载逻辑\r\n+  }, []);\r\n+\r\n+  const handleSelectTemplate = (templateId: string | null) => {\r\n+    selectTemplate(templateId);\r\n+    // TODO: Potentially update FFmpegPanel's state with selected template's operations and parameters\r\n+    // This would involve either:\r\n+    // 1. FFmpegList calling an action/function provided by FFmpegPanel or a shared store\r\n+    // 2. App.tsx observing selectedTemplateId changes and updating FFmpegPanel's store\r\n+    // 现在已经使用同一个store，可以直接在selectTemplate action中更新operation和params\r\n+  };\r\n+\r\n+  // TODO: 在FFmpegPanel store中添加selectedTemplateId和selectTemplate action\r\n+\r\n+  return (\r\n+    <div className={styles.ffmpegListContainer}>\r\n+      <List\r\n+        dataSource={tplList}\r\n+        pagination={{\r\n+          pageSize: 5,\r\n+          showSizeChanger: true,\r\n+          pageSizeOptions: [\"5\", \"10\", \"20\", \"50\"],\r\n+          locale: {\r\n+            items_per_page: \"条/页\",\r\n+            jump_to: \"跳至\",\r\n+            jump_to_confirm: \"确定\",\r\n+            next_page: \"下一页\",\r\n+            prev_page: \"上一页\",\r\n+            prev_5: \"向前 5 页\",\r\n+            next_5: \"向后 5 页\",\r\n+            prev_3: \"向前 3 页\",\r\n+            next_3: \"向后 3 页\",\r\n+          },\r\n+        }}\r\n+        renderItem={(template) => (\r\n+          <List.Item\r\n+            actions={[\r\n+              <Radio\r\n+                checked={selectedTemplateId === template.id}\r\n+                onClick={() =>\r\n+                  handleSelectTemplate(\r\n+                    selectedTemplateId === template.id ? null : template.id\r\n+                  )\r\n+                }\r\n+              />,\r\n+            ]}\r\n+            className={styles.listItem}\r\n+          >\r\n+            <List.Item.Meta\r\n+              title={<Text strong>{template.name}</Text>}\r\n+              description={\r\n+                <Space direction=\"vertical\" size={0}>\r\n+                  <Text type=\"secondary\">\r\n+                    操作: {template.operations.join(\", \")}\r\n+                  </Text>\r\n+                  {/* Display some parameter summary if needed */}\r\n+                  {/* <Text type=\"secondary\">参数: ...</Text> */}\r\n+                </Space>\r\n+              }\r\n+            />\r\n+          </List.Item>\r\n+        )}\r\n+      />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default FFmpegList;\r\n"
                },
                {
                    "date": 1748265180645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,95 +86,4 @@\n   );\r\n };\r\n \r\n export default FFmpegList;\r\n-import { List, Radio, Space, Typography } from \"antd\";\r\n-import React, { useEffect } from \"react\";\r\n-\r\n-import { FFmpegTemplate } from \"../FFmpegPanel/types\";\r\n-import styles from \"./style.module.less\";\r\n-import { useFFmpegPanelStore } from \"../store\"; // 更新导入路径\r\n-\r\n-// import { useFFmpegListStore } from \"./store\"; // 移除对FFmpegList store的引入\r\n-\r\n-const { Text } = Typography;\r\n-\r\n-interface FFmpegListProps {\r\n-  templates?: FFmpegTemplate[];\r\n-}\r\n-\r\n-const FFmpegList: React.FC<FFmpegListProps> = ({ templates }) => {\r\n-  const store = useFFmpegPanelStore();\r\n-  const { selectedTemplateId, selectTemplate } = store;\r\n-  const tplList = templates || store.templates;\r\n-\r\n-  useEffect(() => {\r\n-    // 预留加载逻辑\r\n-  }, []);\r\n-\r\n-  const handleSelectTemplate = (templateId: string | null) => {\r\n-    selectTemplate(templateId);\r\n-    // TODO: Potentially update FFmpegPanel's state with selected template's operations and parameters\r\n-    // This would involve either:\r\n-    // 1. FFmpegList calling an action/function provided by FFmpegPanel or a shared store\r\n-    // 2. App.tsx observing selectedTemplateId changes and updating FFmpegPanel's store\r\n-    // 现在已经使用同一个store，可以直接在selectTemplate action中更新operation和params\r\n-  };\r\n-\r\n-  // TODO: 在FFmpegPanel store中添加selectedTemplateId和selectTemplate action\r\n-\r\n-  return (\r\n-    <div className={styles.ffmpegListContainer}>\r\n-      <List\r\n-        dataSource={tplList}\r\n-        pagination={{\r\n-          pageSize: 5,\r\n-          showSizeChanger: true,\r\n-          pageSizeOptions: [\"5\", \"10\", \"20\", \"50\"],\r\n-          showTotal: (total, range) =>\r\n-            `第${range[0]}-${range[1]}条，共${total}条`,\r\n-          locale: {\r\n-            items_per_page: \"条/页\",\r\n-            jump_to: \"跳至\",\r\n-            jump_to_confirm: \"确定\",\r\n-            next_page: \"下一页\",\r\n-            prev_page: \"上一页\",\r\n-            prev_5: \"向前 5 页\",\r\n-            next_5: \"向后 5 页\",\r\n-            prev_3: \"向前 3 页\",\r\n-            next_3: \"向后 3 页\",\r\n-          },\r\n-        }}\r\n-        renderItem={(template) => (\r\n-          <List.Item\r\n-            actions={[\r\n-              <Radio\r\n-                checked={selectedTemplateId === template.id}\r\n-                onClick={() =>\r\n-                  handleSelectTemplate(\r\n-                    selectedTemplateId === template.id ? null : template.id\r\n-                  )\r\n-                }\r\n-              />,\r\n-            ]}\r\n-            className={styles.listItem}\r\n-          >\r\n-            <List.Item.Meta\r\n-              title={<Text strong>{template.name}</Text>}\r\n-              description={\r\n-                <Space direction=\"vertical\" size={0}>\r\n-                  <Text type=\"secondary\">\r\n-                    操作: {template.operations.join(\", \")}\r\n-                  </Text>\r\n-                  {/* Display some parameter summary if needed */}\r\n-                  {/* <Text type=\"secondary\">参数: ...</Text> */}\r\n-                </Space>\r\n-              }\r\n-            />\r\n-          </List.Item>\r\n-        )}\r\n-      />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default FFmpegList;\r\n"
                }
            ],
            "date": 1748098884987,
            "name": "Commit-0",
            "content": "import { List, Radio, Space, Typography } from \"antd\";\r\nimport React, { useEffect } from \"react\";\r\n\r\nimport styles from \"./style.module.less\";\r\nimport { useFFmpegPanelStore } from \"../../FFmpegPanel/store\"; // 引入FFmpegPanel store\r\n\r\n// import { useFFmpegListStore } from \"./store\"; // 移除对FFmpegList store的引入\r\n\r\nconst { Text } = Typography;\r\n\r\nconst FFmpegList: React.FC = () => {\r\n  const { templates, selectedTemplateId, loadTemplates, selectTemplate } =\r\n    // useFFmpegListStore(); // 使用FFmpegPanel store\r\n    useFFmpegPanelStore();\r\n\r\n  useEffect(() => {\r\n    // Load templates when the component mounts\r\n    // 注意：useFFmpegPanelStore中没有loadTemplates方法，需要调整或手动加载\r\n    // 暂时不调用loadTemplates，假设App.tsx或其他地方已经加载了模板\r\n    // loadTemplates(); // 移除loadTemplates调用，因为FFmpegPanel store中没有这个action\r\n    // 如果FFmpegPanelStore需要加载模板，可以在这里触发，但这取决于您的设计\r\n    // 例如：getTemplates(); // 假设FFmpegPanelStore有一个getTemplates action\r\n  }, []); // 依赖项列表清空，避免无限循环\r\n\r\n  const handleSelectTemplate = (templateId: string | null) => {\r\n    selectTemplate(templateId);\r\n    // TODO: Potentially update FFmpegPanel's state with selected template's operations and parameters\r\n    // This would involve either:\r\n    // 1. FFmpegList calling an action/function provided by FFmpegPanel or a shared store\r\n    // 2. App.tsx observing selectedTemplateId changes and updating FFmpegPanel's store\r\n    // 现在已经使用同一个store，可以直接在selectTemplate action中更新operation和params\r\n  };\r\n\r\n  // TODO: 在FFmpegPanel store中添加selectedTemplateId和selectTemplate action\r\n\r\n  return (\r\n    <div className={styles.ffmpegListContainer}>\r\n      <h2>FFmpeg 模板列表 (单选)</h2>\r\n      <List\r\n        dataSource={templates}\r\n        renderItem={(template) => (\r\n          <List.Item\r\n            actions={[\r\n              <Radio\r\n                checked={selectedTemplateId === template.id}\r\n                onClick={() =>\r\n                  handleSelectTemplate(\r\n                    selectedTemplateId === template.id ? null : template.id\r\n                  )\r\n                }\r\n              />,\r\n            ]}\r\n            className={styles.listItem}\r\n          >\r\n            <List.Item.Meta\r\n              title={<Text strong>{template.name}</Text>}\r\n              description={\r\n                <Space direction=\"vertical\" size={0}>\r\n                  <Text type=\"secondary\">\r\n                    操作: {template.operations.join(\", \")}\r\n                  </Text>\r\n                  {/* Display some parameter summary if needed */}\r\n                  {/* <Text type=\"secondary\">参数: ...</Text> */}\r\n                </Space>\r\n              }\r\n            />\r\n          </List.Item>\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FFmpegList;\r\n"
        }
    ]
}