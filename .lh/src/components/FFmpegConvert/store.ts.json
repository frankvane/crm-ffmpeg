{
    "sourceFile": "src/components/FFmpegConvert/store.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1748099309483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748099318829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { FFmpegOperationType, FFmpegTemplate } from \"./types\";\r\n+import { FFmpegOperationType, FFmpegTemplate } from \"./FFmpegPanel/types\";\r\n import { PersistStorage, persist } from \"zustand/middleware\";\r\n \r\n import { create } from \"zustand\";\r\n import { immer } from \"zustand/middleware/immer\"; // 导入 immer 中间件\r\n"
                },
                {
                    "date": 1748100872711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n   selectedOperations: FFmpegOperationType[];\r\n   paramValues: Record<string, Record<string, any>>; // 暂时使用 any\r\n   templates: FFmpegTemplate[];\r\n   selectedTemplateId: string | null; // 新增状态\r\n+  hasParamConflicts: boolean; // 新增冲突状态\r\n   // 可以根据需要添加其他状态，如处理进度等\r\n }\r\n \r\n // 定义一个用于 saveTemplate 参数的类型，id 是可选的\r\n@@ -25,8 +26,9 @@\n   saveTemplate: (template: SavableFFmpegTemplate) => void;\r\n   deleteTemplate: (id: string) => void;\r\n   applyTemplate: (id: string) => void;\r\n   selectTemplate: (id: string | null) => void; // 新增 action\r\n+  setHasParamConflicts: (hasConflicts: boolean) => void; // 新增设置冲突状态 action\r\n }\r\n \r\n // 实现 PersistStorage 接口的 customStorage 对象\r\n const customStorage: PersistStorage<FFmpegPanelState & FFmpegPanelActions> = {\r\n@@ -57,8 +59,9 @@\n       selectedOperations: [],\r\n       paramValues: {},\r\n       templates: [], // 初始模板列表为空\r\n       selectedTemplateId: null, // 初始 selectedTemplateId 为 null\r\n+      hasParamConflicts: false, // 初始无冲突\r\n \r\n       // Actions\r\n       // 修改 set 的用法，直接修改 draft state\r\n       setSelectedOperations: (operations) =>\r\n@@ -117,8 +120,13 @@\n         set((state) => {\r\n           state.selectedTemplateId = id;\r\n         });\r\n       },\r\n+      setHasParamConflicts: (hasConflicts) => {\r\n+        set((state) => {\r\n+          state.hasParamConflicts = hasConflicts;\r\n+        });\r\n+      },\r\n     })), // immer 中间件结束\r\n     {\r\n       name: \"ffmpeg-templates\", // localStorage key\r\n       storage: customStorage, // 使用 customStorage 对象\r\n"
                },
                {
                    "date": 1748264687443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,11 @@\n       name: \"ffmpeg-templates\", // localStorage key\r\n       storage: customStorage, // 使用 customStorage 对象\r\n       // partialize 保持不变，因为它定义了哪些状态被持久化\r\n       partialize: (state) =>\r\n-        ({ templates: state.templates } as FFmpegPanelState &\r\n-          FFmpegPanelActions),\r\n+        ({\r\n+          templates: state.templates,\r\n+          selectedTemplateId: state.selectedTemplateId, // 持久化选中模板ID\r\n+        } as FFmpegPanelState & FFmpegPanelActions),\r\n     }\r\n   )\r\n );\r\n"
                },
                {
                    "date": 1748273078647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,10 @@\n   deleteTemplate: (id: string) => void;\r\n   applyTemplate: (id: string) => void;\r\n   selectTemplate: (id: string | null) => void; // 新增 action\r\n   setHasParamConflicts: (hasConflicts: boolean) => void; // 新增设置冲突状态 action\r\n+  setMode: (mode: \"new\" | \"edit\") => void;\r\n+  setEditingTemplateId: (id: string | null) => void;\r\n }\r\n \r\n // 实现 PersistStorage 接口的 customStorage 对象\r\n const customStorage: PersistStorage<FFmpegPanelState & FFmpegPanelActions> = {\r\n@@ -125,8 +127,18 @@\n         set((state) => {\r\n           state.hasParamConflicts = hasConflicts;\r\n         });\r\n       },\r\n+      setMode: (mode) => {\r\n+        set((state) => {\r\n+          state.mode = mode;\r\n+        });\r\n+      },\r\n+      setEditingTemplateId: (id) => {\r\n+        set((state) => {\r\n+          state.editingTemplateId = id;\r\n+        });\r\n+      },\r\n     })), // immer 中间件结束\r\n     {\r\n       name: \"ffmpeg-templates\", // localStorage key\r\n       storage: customStorage, // 使用 customStorage 对象\r\n"
                },
                {
                    "date": 1748273089826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,10 @@\n   paramValues: Record<string, Record<string, any>>; // 暂时使用 any\r\n   templates: FFmpegTemplate[];\r\n   selectedTemplateId: string | null; // 新增状态\r\n   hasParamConflicts: boolean; // 新增冲突状态\r\n+  mode: \"new\" | \"edit\"; // 新增模式状态\r\n+  editingTemplateId: string | null; // 新增编辑模板ID\r\n   // 可以根据需要添加其他状态，如处理进度等\r\n }\r\n \r\n // 定义一个用于 saveTemplate 参数的类型，id 是可选的\r\n@@ -62,8 +64,10 @@\n       paramValues: {},\r\n       templates: [], // 初始模板列表为空\r\n       selectedTemplateId: null, // 初始 selectedTemplateId 为 null\r\n       hasParamConflicts: false, // 初始无冲突\r\n+      mode: \"new\", // 初始模式为 'new'\r\n+      editingTemplateId: null, // 初始编辑模板ID为 null\r\n \r\n       // Actions\r\n       // 修改 set 的用法，直接修改 draft state\r\n       setSelectedOperations: (operations) =>\r\n@@ -128,14 +132,14 @@\n           state.hasParamConflicts = hasConflicts;\r\n         });\r\n       },\r\n       setMode: (mode) => {\r\n-        set((state) => {\r\n+        set((state: any) => {\r\n           state.mode = mode;\r\n         });\r\n       },\r\n       setEditingTemplateId: (id) => {\r\n-        set((state) => {\r\n+        set((state: any) => {\r\n           state.editingTemplateId = id;\r\n         });\r\n       },\r\n     })), // immer 中间件结束\r\n"
                }
            ],
            "date": 1748099309483,
            "name": "Commit-0",
            "content": "import { FFmpegOperationType, FFmpegTemplate } from \"./types\";\r\nimport { PersistStorage, persist } from \"zustand/middleware\";\r\n\r\nimport { create } from \"zustand\";\r\nimport { immer } from \"zustand/middleware/immer\"; // 导入 immer 中间件\r\n\r\ninterface FFmpegPanelState {\r\n  selectedOperations: FFmpegOperationType[];\r\n  paramValues: Record<string, Record<string, any>>; // 暂时使用 any\r\n  templates: FFmpegTemplate[];\r\n  selectedTemplateId: string | null; // 新增状态\r\n  // 可以根据需要添加其他状态，如处理进度等\r\n}\r\n\r\n// 定义一个用于 saveTemplate 参数的类型，id 是可选的\r\ninterface SavableFFmpegTemplate\r\n  extends Omit<FFmpegTemplate, \"id\" | \"createdAt\" | \"updatedAt\"> {\r\n  id?: string; // 使 id 成为可选属性\r\n}\r\n\r\ninterface FFmpegPanelActions {\r\n  setSelectedOperations: (operations: FFmpegOperationType[]) => void;\r\n  setParamValues: (paramValues: Record<string, Record<string, any>>) => void;\r\n  // 使用新定义的 SavableFFmpegTemplate 类型作为参数\r\n  saveTemplate: (template: SavableFFmpegTemplate) => void;\r\n  deleteTemplate: (id: string) => void;\r\n  applyTemplate: (id: string) => void;\r\n  selectTemplate: (id: string | null) => void; // 新增 action\r\n}\r\n\r\n// 实现 PersistStorage 接口的 customStorage 对象\r\nconst customStorage: PersistStorage<FFmpegPanelState & FFmpegPanelActions> = {\r\n  getItem: (name) => {\r\n    const item = localStorage.getItem(name);\r\n    if (item) {\r\n      // 需要手动解析 JSON\r\n      return JSON.parse(item);\r\n    }\r\n    return null;\r\n  },\r\n  setItem: (name, value) => {\r\n    // 需要手动 stringify JSON\r\n    localStorage.setItem(name, JSON.stringify(value));\r\n  },\r\n  removeItem: (name) => {\r\n    localStorage.removeItem(name);\r\n  },\r\n};\r\n\r\n// 使用 persist 和 immer 中间件包裹 create\r\nexport const useFFmpegPanelStore = create<\r\n  FFmpegPanelState & FFmpegPanelActions\r\n>()(\r\n  persist(\r\n    immer((set, get) => ({\r\n      // 初始状态\r\n      selectedOperations: [],\r\n      paramValues: {},\r\n      templates: [], // 初始模板列表为空\r\n      selectedTemplateId: null, // 初始 selectedTemplateId 为 null\r\n\r\n      // Actions\r\n      // 修改 set 的用法，直接修改 draft state\r\n      setSelectedOperations: (operations) =>\r\n        set((state) => {\r\n          state.selectedOperations = operations;\r\n        }),\r\n      setParamValues: (paramValues) =>\r\n        set((state) => {\r\n          state.paramValues = paramValues;\r\n        }),\r\n      saveTemplate: (template) => {\r\n        set((state) => {\r\n          // 使用 immer 后直接修改 state\r\n          const existingIndex = state.templates.findIndex(\r\n            (tpl) => tpl.id === template.id\r\n          ); // 查找是否存在同ID模板\r\n\r\n          if (existingIndex > -1 && template.id !== undefined) {\r\n            // 如果存在且有ID，执行更新\r\n            state.templates[existingIndex] = {\r\n              // 直接替换，更新时间和ID保持不变\r\n              ...(template as FFmpegTemplate), // Cast to FFmpegTemplate to include id\r\n              updatedAt: Date.now(),\r\n            };\r\n          } else {\r\n            // 否则新增\r\n            const newTemplate = {\r\n              ...template,\r\n              id: Date.now().toString(), // 简单的唯一ID生成\r\n              createdAt: Date.now(),\r\n              updatedAt: Date.now(),\r\n            };\r\n            state.templates.push(newTemplate as FFmpegTemplate); // Cast to FFmpegTemplate\r\n          }\r\n        });\r\n      },\r\n      deleteTemplate: (id) => {\r\n        set((state) => {\r\n          // 使用 immer 后直接修改 state\r\n          state.templates = state.templates.filter((tpl) => tpl.id !== id);\r\n          // 这里不再需要同步其他状态\r\n        });\r\n      },\r\n      applyTemplate: (id) => {\r\n        const templateToApply = get().templates.find((tpl) => tpl.id === id);\r\n        if (templateToApply) {\r\n          set((state) => {\r\n            // 使用 immer 后直接修改 state\r\n            state.selectedOperations = templateToApply.operations;\r\n            state.paramValues = templateToApply.params;\r\n          });\r\n          // TODO: 可能需要同步表单字段\r\n        }\r\n      },\r\n      selectTemplate: (id) => {\r\n        set((state) => {\r\n          state.selectedTemplateId = id;\r\n        });\r\n      },\r\n    })), // immer 中间件结束\r\n    {\r\n      name: \"ffmpeg-templates\", // localStorage key\r\n      storage: customStorage, // 使用 customStorage 对象\r\n      // partialize 保持不变，因为它定义了哪些状态被持久化\r\n      partialize: (state) =>\r\n        ({ templates: state.templates } as FFmpegPanelState &\r\n          FFmpegPanelActions),\r\n    }\r\n  )\r\n);\r\n"
        }
    ]
}