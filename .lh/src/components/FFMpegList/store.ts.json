{
    "sourceFile": "src/components/FFMpegList/store.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1748098099272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748098256855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { create } from 'zustand';\r\n+import { create } from \"zustand\";\r\n \r\n interface Template {\r\n   id: string;\r\n   name: string;\r\n@@ -22,15 +22,30 @@\n   loadTemplates: () => {\r\n     // TODO: Implement logic to load templates, e.g., from localStorage or backend API\r\n     // For now, using dummy data\r\n     const dummyTemplates: Template[] = [\r\n-      { id: 'template-1', name: '视频压缩 (中)', operations: ['compress'], params: { compress: { quality: 'medium' } } },\r\n-      { id: 'template-2', name: '提取音频 (MP3)', operations: ['extract-audio'], params: { 'extract-audio': { format: 'mp3' } } },\r\n-      { id: 'template-3', name: '视频缩放 (720p)', operations: ['scale'], params: { scale: { width: 1280, height: 720 } } },\r\n+      {\r\n+        id: \"template-1\",\r\n+        name: \"视频压缩 (中)\",\r\n+        operations: [\"compress\"],\r\n+        params: { compress: { quality: \"medium\" } },\r\n+      },\r\n+      {\r\n+        id: \"template-2\",\r\n\\ No newline at end of file\n+        name: \"提取音频 (MP3)\",\r\n+        operations: [\"extract-audio\"],\r\n+        params: { \"extract-audio\": { format: \"mp3\" } },\r\n+      },\r\n+      {\r\n+        id: \"template-3\",\r\n+        name: \"视频缩放 (720p)\",\r\n+        operations: [\"scale\"],\r\n+        params: { scale: { width: 1280, height: 720 } },\r\n+      },\r\n     ];\r\n     set({ templates: dummyTemplates });\r\n   },\r\n \r\n   selectTemplate: (templateId) => {\r\n     set({ selectedTemplateId: templateId });\r\n   },\r\n-}));\n+}));\r\n"
                },
                {
                    "date": 1748098585537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,51 +0,0 @@\n-import { create } from \"zustand\";\r\n-\r\n-interface Template {\r\n-  id: string;\r\n-  name: string;\r\n-  // Add other template properties here, like operations and parameters\r\n-  operations: any[]; // TODO: Define a proper type for operations\r\n-  params: any; // TODO: Define a proper type for params\r\n-}\r\n-\r\n-interface FFmpegListState {\r\n-  templates: Template[];\r\n-  selectedTemplateId: string | null;\r\n-  loadTemplates: () => void;\r\n-  selectTemplate: (templateId: string | null) => void;\r\n-}\r\n-\r\n-export const useFFmpegListStore = create<FFmpegListState>((set) => ({\r\n-  templates: [],\r\n-  selectedTemplateId: null,\r\n-\r\n-  loadTemplates: () => {\r\n-    // TODO: Implement logic to load templates, e.g., from localStorage or backend API\r\n-    // For now, using dummy data\r\n-    const dummyTemplates: Template[] = [\r\n-      {\r\n-        id: \"template-1\",\r\n-        name: \"视频压缩 (中)\",\r\n-        operations: [\"compress\"],\r\n-        params: { compress: { quality: \"medium\" } },\r\n-      },\r\n-      {\r\n-        id: \"template-2\",\r\n-        name: \"提取音频 (MP3)\",\r\n-        operations: [\"extract-audio\"],\r\n-        params: { \"extract-audio\": { format: \"mp3\" } },\r\n-      },\r\n-      {\r\n-        id: \"template-3\",\r\n-        name: \"视频缩放 (720p)\",\r\n-        operations: [\"scale\"],\r\n-        params: { scale: { width: 1280, height: 720 } },\r\n-      },\r\n-    ];\r\n-    set({ templates: dummyTemplates });\r\n-  },\r\n-\r\n-  selectTemplate: (templateId) => {\r\n-    set({ selectedTemplateId: templateId });\r\n-  },\r\n-}));\r\n\\ No newline at end of file\n"
                }
            ],
            "date": 1748098099272,
            "name": "Commit-0",
            "content": "import { create } from 'zustand';\r\n\r\ninterface Template {\r\n  id: string;\r\n  name: string;\r\n  // Add other template properties here, like operations and parameters\r\n  operations: any[]; // TODO: Define a proper type for operations\r\n  params: any; // TODO: Define a proper type for params\r\n}\r\n\r\ninterface FFmpegListState {\r\n  templates: Template[];\r\n  selectedTemplateId: string | null;\r\n  loadTemplates: () => void;\r\n  selectTemplate: (templateId: string | null) => void;\r\n}\r\n\r\nexport const useFFmpegListStore = create<FFmpegListState>((set) => ({\r\n  templates: [],\r\n  selectedTemplateId: null,\r\n\r\n  loadTemplates: () => {\r\n    // TODO: Implement logic to load templates, e.g., from localStorage or backend API\r\n    // For now, using dummy data\r\n    const dummyTemplates: Template[] = [\r\n      { id: 'template-1', name: '视频压缩 (中)', operations: ['compress'], params: { compress: { quality: 'medium' } } },\r\n      { id: 'template-2', name: '提取音频 (MP3)', operations: ['extract-audio'], params: { 'extract-audio': { format: 'mp3' } } },\r\n      { id: 'template-3', name: '视频缩放 (720p)', operations: ['scale'], params: { scale: { width: 1280, height: 720 } } },\r\n    ];\r\n    set({ templates: dummyTemplates });\r\n  },\r\n\r\n  selectTemplate: (templateId) => {\r\n    set({ selectedTemplateId: templateId });\r\n  },\r\n}));"
        }
    ]
}