{
    "sourceFile": "src/components/FFmpegPanel/OperationParametersFormItems.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1748090277900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748090290355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,15 @@\n import {\r\n   Col,\r\n   Divider,\r\n   Form,\r\n-  FormInstance,\r\n   Input,\r\n   InputNumber,\r\n   Row,\r\n   Select,\r\n   Switch,\r\n } from \"antd\";\r\n-import { FFmpegOperationType, FFmpegParamSchema, ParamValues } from \"./types\";\r\n+import { FFmpegOperationType, FFmpegParamSchema } from \"./types\";\r\n import type { Rule, RuleObject } from \"antd/es/form\";\r\n \r\n import { OPERATION_SCHEMAS } from \"./schemas\";\r\n import React from \"react\";\r\n@@ -18,11 +17,11 @@\n interface OperationParametersFormItemsProps {\r\n   visualSelectedOperations: FFmpegOperationType[];\r\n }\r\n \r\n-const OperationParametersFormItems: React.FC<\r\n-  OperationParametersFormItemsProps\r\n-> = ({ visualSelectedOperations }) => {\r\n+const OperationParametersFormItems: React.FC<OperationParametersFormItemsProps> = ({\r\n+  visualSelectedOperations,\r\n+}) => {\r\n   const operationItems: React.ReactNode[] = [];\r\n \r\n   visualSelectedOperations.forEach((op) => {\r\n     const params = OPERATION_SCHEMAS[op]?.params || [];\r\n@@ -107,9 +106,12 @@\n               name={itemName}\r\n               rules={rules}\r\n               style={{ marginBottom: 16 }}\r\n             >\r\n-              <Select placeholder={param.placeholder} options={param.options} />\r\n+              <Select\r\n+                placeholder={param.placeholder}\r\n+                options={param.options}\r\n+              />\r\n             </Form.Item>\r\n           );\r\n           break;\r\n         case \"text\":\r\n"
                }
            ],
            "date": 1748090277900,
            "name": "Commit-0",
            "content": "import { Col, Divider, Form, FormInstance, Input, InputNumber, Row, Select, Switch } from 'antd';\r\nimport { FFmpegOperationType, FFmpegParamSchema, ParamValues } from \"./types\";\r\nimport type { Rule, RuleObject } from 'antd/es/form';\r\n\r\nimport { OPERATION_SCHEMAS } from \"./schemas\";\r\nimport React from 'react';\r\n\r\ninterface OperationParametersFormItemsProps {\r\n  visualSelectedOperations: FFmpegOperationType[];\r\n}\r\n\r\nconst OperationParametersFormItems: React.FC<OperationParametersFormItemsProps> = ({\r\n  visualSelectedOperations,\r\n}) => {\r\n  const operationItems: React.ReactNode[] = [];\r\n\r\n  visualSelectedOperations.forEach((op) => {\r\n    const params = OPERATION_SCHEMAS[op]?.params || [];\r\n    if (params.length === 0) return;\r\n\r\n    // 添加操作类型的小标题或分隔\r\n    operationItems.push(\r\n      <Divider\r\n        key={`divider-${op}`}\r\n        orientation=\"left\"\r\n        plain\r\n        style={{ marginTop: 24, marginBottom: 16 }}\r\n      >\r\n        {OPERATION_SCHEMAS[op].label} 参数\r\n      </Divider>\r\n    );\r\n\r\n    const paramRowItems: React.ReactNode[] = [];\r\n    params.forEach((param: FFmpegParamSchema) => {\r\n      const itemName = [op, param.name];\r\n      const itemKey = `${op}_${param.name}`;\r\n\r\n      // 动态生成rules\r\n      const rules: Rule[] = [\r\n        { required: true, message: `请输入${param.label}` },\r\n      ];\r\n      if (param.type === \"number\") {\r\n        if (param.min !== undefined) {\r\n          rules.push({\r\n            validator: (\r\n              _: RuleObject,\r\n              value: number | string | boolean | undefined\r\n            ) =>\r\n              value === undefined || Number(value) >= param.min!\r\n                ? Promise.resolve()\r\n                : Promise.reject(\r\n                    new Error(`${param.label}不能小于${param.min}`)\r\n                  ),\r\n          });\r\n        }\r\n        if (param.max !== undefined) {\r\n          rules.push({\r\n            validator: (\r\n              _: RuleObject,\r\n              value: number | string | boolean | undefined\r\n            ) =>\r\n              value === undefined || Number(value) <= param.max!\r\n                ? Promise.resolve()\r\n                : Promise.reject(\r\n                    new Error(`${param.label}不能大于${param.max}`)\r\n                  ),\r\n          });\r\n        }\r\n      }\r\n\r\n      let node: React.ReactNode = null;\r\n      switch (param.type) {\r\n        case \"number\":\r\n          node = (\r\n            <Form.Item\r\n              key={itemKey}\r\n              label={param.label}\r\n              name={itemName}\r\n              rules={rules}\r\n              style={{ marginBottom: 16 }}\r\n            >\r\n              <InputNumber\r\n                min={param.min}\r\n                max={param.max}\r\n                step={param.step || 1}\r\n                placeholder={param.placeholder}\r\n                style={{ width: \"100%\" }} // Make InputNumber take full width\r\n              />\r\n            </Form.Item>\r\n          );\r\n          break;\r\n        case \"select\":\r\n          node = (\r\n            <Form.Item\r\n              key={itemKey}\r\n              label={param.label}\r\n              name={itemName}\r\n              rules={rules}\r\n              style={{ marginBottom: 16 }}\r\n            >\r\n              <Select\r\n                placeholder={param.placeholder}\r\n                options={param.options}\r\n              />\r\n            </Form.Item>\r\n          );\r\n          break;\r\n        case \"text\":\r\n          node = (\r\n            <Form.Item\r\n              key={itemKey}\r\n              label={param.label}\r\n              name={itemName}\r\n              rules={rules}\r\n              style={{ marginBottom: 16 }}\r\n            >\r\n              <Input placeholder={param.placeholder} />\r\n            </Form.Item>\r\n          );\r\n          break;\r\n        case \"switch\":\r\n          node = (\r\n            <Form.Item\r\n              key={itemKey}\r\n              label={param.label}\r\n              name={itemName}\r\n              valuePropName=\"checked\" // For Switch component\r\n              rules={rules}\r\n              style={{ marginBottom: 16 }}\r\n            >\r\n              <Switch />\r\n            </Form.Item>\r\n          );\r\n          break;\r\n        default:\r\n          node = null;\r\n      }\r\n      if (node) paramRowItems.push(node);\r\n    });\r\n\r\n    // 将该操作的参数按2列分组\r\n    for (let i = 0; i < paramRowItems.length; i += 2) {\r\n      operationItems.push(\r\n        <Row gutter={16} key={`op-${op}-row-${i / 2}`}>\r\n          <Col span={12}>{paramRowItems[i]}</Col>\r\n          {paramRowItems[i + 1] && <Col span={12}>{paramRowItems[i + 1]}</Col>}\r\n        </Row>\r\n      );\r\n    }\r\n  });\r\n\r\n  return <>{operationItems}</>; // Return all generated rows\r\n};\r\n\r\nexport default OperationParametersFormItems;"
        }
    ]
}