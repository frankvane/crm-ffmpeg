{
    "sourceFile": "src/components/FFmpegPanel/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 44,
            "patches": [
                {
                    "date": 1748065540477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748065658487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,56 @@\n-import './style.less';\r\n+import \"./style.less\";\r\n \r\n-import { Alert, Button, Card, Divider, Form, InputNumber, Select } from 'antd';\r\n-import React, { useState } from 'react';\r\n+import { Alert, Button, Card, Divider, Form, InputNumber, Select } from \"antd\";\r\n+import React, { useState } from \"react\";\r\n \r\n const { Option } = Select;\r\n \r\n const OPERATION_OPTIONS = [\r\n-  { label: '视频缩放', value: 'scale' },\r\n-  { label: '视频压缩', value: 'compress' },\r\n-  { label: '转出音频', value: 'extract-audio' },\r\n+  { label: \"视频缩放\", value: \"scale\" },\r\n+  { label: \"视频压缩\", value: \"compress\" },\r\n+  { label: \"转出音频\", value: \"extract-audio\" },\r\n   // 可扩展更多操作类型\r\n ];\r\n \r\n const FFmpegPanel: React.FC = () => {\r\n-  const [operation, setOperation] = useState('scale');\r\n+  const [operation, setOperation] = useState(\"scale\");\r\n \r\n   // 参数区UI根据操作类型动态切换\r\n   const renderParams = () => {\r\n     switch (operation) {\r\n-      case 'scale':\r\n+      case \"scale\":\r\n         return (\r\n           <>\r\n             <Form.Item label=\"目标宽度\" name=\"width\">\r\n-              <InputNumber min={1} placeholder=\"如 1280\" style={{ width: '100%' }} />\r\n+              <InputNumber\r\n+                min={1}\r\n+                placeholder=\"如 1280\"\r\n+                style={{ width: \"100%\" }}\r\n+              />\r\n             </Form.Item>\r\n             <Form.Item label=\"目标高度\" name=\"height\">\r\n-              <InputNumber min={1} placeholder=\"如 720\" style={{ width: '100%' }} />\r\n+              <InputNumber\r\n+                min={1}\r\n+                placeholder=\"如 720\"\r\n+                style={{ width: \"100%\" }}\r\n+              />\r\n             </Form.Item>\r\n           </>\r\n         );\r\n-      case 'compress':\r\n+      case \"compress\":\r\n         return (\r\n           <>\r\n             <Form.Item label=\"目标码率(kbps)\" name=\"bitrate\">\r\n-              <InputNumber min={100} placeholder=\"如 800\" style={{ width: '100%' }} />\r\n+              <InputNumber\r\n+                min={100}\r\n+                placeholder=\"如 800\"\r\n+                style={{ width: \"100%\" }}\r\n+              />\r\n             </Form.Item>\r\n           </>\r\n         );\r\n-      case 'extract-audio':\r\n+      case \"extract-audio\":\r\n         return (\r\n           <>\r\n             <Form.Item label=\"音频格式\" name=\"audioFormat\">\r\n               <Select placeholder=\"选择格式\">\r\n@@ -61,20 +73,26 @@\n           <Select\r\n             value={operation}\r\n             onChange={setOperation}\r\n             options={OPERATION_OPTIONS}\r\n-            style={{ width: '100%' }}\r\n+            style={{ width: \"100%\" }}\r\n           />\r\n         </Form.Item>\r\n         {renderParams()}\r\n         <Divider />\r\n         <Form.Item>\r\n-          <Button type=\"primary\" disabled>开始处理（待实现）</Button>\r\n+          <Button type=\"primary\" disabled>\r\n+            开始处理（待实现）\r\n+          </Button>\r\n         </Form.Item>\r\n       </Form>\r\n       <Divider />\r\n-      <Alert message=\"处理进度与结果将在此展示（UI占位）\" type=\"info\" showIcon />\r\n+      <Alert\r\n\\ No newline at end of file\n+        message=\"处理进度与结果将在此展示（UI占位）\"\r\n+        type=\"info\"\r\n+        showIcon\r\n+      />\r\n     </Card>\r\n   );\r\n };\r\n \r\n-export default FFmpegPanel;\n+export default FFmpegPanel;\r\n"
                },
                {
                    "date": 1748066002224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,22 @@\n import \"./style.less\";\r\n \r\n-import { Alert, Button, Card, Divider, Form, InputNumber, Select } from \"antd\";\r\n+import {\r\n+  Alert,\r\n+  Button,\r\n+  Card,\r\n+  Divider,\r\n+  Form,\r\n+  InputNumber,\r\n+  Progress,\r\n+  Select,\r\n+  Upload,\r\n+  message,\r\n+} from \"antd\";\r\n import React, { useState } from \"react\";\r\n \r\n+import FileUploader from \"../FileUploader\";\r\n+\r\n const { Option } = Select;\r\n \r\n const OPERATION_OPTIONS = [\r\n   { label: \"视频缩放\", value: \"scale\" },\r\n@@ -13,8 +26,12 @@\n ];\r\n \r\n const FFmpegPanel: React.FC = () => {\r\n   const [operation, setOperation] = useState(\"scale\");\r\n+  const [uploadedFile, setUploadedFile] = useState<File | null>(null);\r\n+  const [processing, setProcessing] = useState(false);\r\n+  const [progress, setProgress] = useState(0);\r\n+  const [result, setResult] = useState<string | null>(null);\r\n \r\n   // 参数区UI根据操作类型动态切换\r\n   const renderParams = () => {\r\n     switch (operation) {\r\n@@ -65,10 +82,54 @@\n         return null;\r\n     }\r\n   };\r\n \r\n+  // 模拟处理进度\r\n+  const handleProcess = () => {\r\n+    if (!uploadedFile) {\r\n+      message.warning(\"请先上传文件\");\r\n+      return;\r\n+    }\r\n+    setProcessing(true);\r\n+    setProgress(0);\r\n+    setResult(null);\r\n+    let percent = 0;\r\n+    const timer = setInterval(() => {\r\n+      percent += Math.random() * 20;\r\n+      if (percent >= 100) {\r\n+        percent = 100;\r\n+        clearInterval(timer);\r\n+        setProcessing(false);\r\n+        setResult(\"处理完成，结果文件下载链接/预览（占位）\");\r\n+      }\r\n+      setProgress(percent);\r\n+    }, 500);\r\n+  };\r\n+\r\n+  // 上传成功回调\r\n+  const handleUploadSuccess = (file: File) => {\r\n+    setUploadedFile(file);\r\n+    message.success(`文件 ${file.name} 上传成功`);\r\n+  };\r\n+\r\n   return (\r\n     <Card className=\"ffmpeg-panel\" title=\"FFmpeg 操作与配置\">\r\n+      <div style={{ marginBottom: 16 }}>\r\n+        <FileUploader\r\n+          accept=\"video/*,audio/*\"\r\n+          maxFileCount={1}\r\n+          onSuccess={handleUploadSuccess}\r\n+          multiple={false}\r\n+          showProgress={true}\r\n+          showFileList={true}\r\n+        />\r\n+        {uploadedFile && (\r\n+          <div style={{ marginTop: 8, color: \"#555\" }}>\r\n+            已上传文件：{uploadedFile.name}（\r\n+            {(uploadedFile.size / 1024 / 1024).toFixed(2)} MB）\r\n+          </div>\r\n+        )}\r\n+      </div>\r\n       <Form layout=\"vertical\">\r\n         <Form.Item label=\"操作类型\" name=\"operation\">\r\n           <Select\r\n             value={operation}\r\n@@ -79,19 +140,35 @@\n         </Form.Item>\r\n         {renderParams()}\r\n         <Divider />\r\n         <Form.Item>\r\n-          <Button type=\"primary\" disabled>\r\n-            开始处理（待实现）\r\n+          <Button type=\"primary\" onClick={handleProcess} loading={processing}>\r\n+            {processing ? \"处理中...\" : \"开始处理\"}\r\n           </Button>\r\n         </Form.Item>\r\n       </Form>\r\n       <Divider />\r\n-      <Alert\r\n-        message=\"处理进度与结果将在此展示（UI占位）\"\r\n-        type=\"info\"\r\n-        showIcon\r\n-      />\r\n+      {processing && (\r\n+        <Progress\r\n+          percent={Math.round(progress)}\r\n+          status={progress < 100 ? \"active\" : \"success\"}\r\n+        />\r\n+      )}\r\n+      {result && (\r\n+        <Alert\r\n+          message={result}\r\n+          type=\"success\"\r\n+          showIcon\r\n+          style={{ marginTop: 16 }}\r\n+        />\r\n+      )}\r\n+      {!processing && !result && (\r\n+        <Alert\r\n+          message=\"处理进度与结果将在此展示（UI占位）\"\r\n+          type=\"info\"\r\n+          showIcon\r\n+        />\r\n+      )}\r\n     </Card>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1748066094322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,8 @@\n   Form,\r\n   InputNumber,\r\n   Progress,\r\n   Select,\r\n-  Upload,\r\n   message,\r\n } from \"antd\";\r\n import React, { useState } from \"react\";\r\n \r\n@@ -171,5 +170,5 @@\n     </Card>\r\n   );\r\n };\r\n \r\n-export default FFmpegPanel;\n\\ No newline at end of file\n+export default FFmpegPanel;\r\n"
                },
                {
                    "date": 1748066219143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,82 +5,283 @@\n   Button,\r\n   Card,\r\n   Divider,\r\n   Form,\r\n+  Input,\r\n   InputNumber,\r\n   Progress,\r\n   Select,\r\n+  Switch,\r\n   message,\r\n } from \"antd\";\r\n import React, { useState } from \"react\";\r\n \r\n import FileUploader from \"../FileUploader\";\r\n \r\n const { Option } = Select;\r\n \r\n-const OPERATION_OPTIONS = [\r\n-  { label: \"视频缩放\", value: \"scale\" },\r\n-  { label: \"视频压缩\", value: \"compress\" },\r\n-  { label: \"转出音频\", value: \"extract-audio\" },\r\n-  // 可扩展更多操作类型\r\n-];\r\n+// 操作类型与参数schema定义\r\n+const OPERATION_SCHEMAS = {\r\n+  scale: {\r\n+    label: \"视频缩放\",\r\n+    params: [\r\n+      {\r\n+        name: \"width\",\r\n+        label: \"目标宽度\",\r\n+        type: \"number\",\r\n+        min: 1,\r\n+        placeholder: \"如 1280\",\r\n+      },\r\n+      {\r\n+        name: \"height\",\r\n+        label: \"目标高度\",\r\n+        type: \"number\",\r\n+        min: 1,\r\n+        placeholder: \"如 720\",\r\n+      },\r\n+    ],\r\n+  },\r\n+  compress: {\r\n+    label: \"视频压缩\",\r\n+    params: [\r\n+      {\r\n+        name: \"bitrate\",\r\n+        label: \"目标码率(kbps)\",\r\n+        type: \"number\",\r\n+        min: 100,\r\n+        placeholder: \"如 800\",\r\n+      },\r\n+    ],\r\n+  },\r\n+  \"extract-audio\": {\r\n+    label: \"转出音频\",\r\n+    params: [\r\n+      {\r\n+        name: \"audioFormat\",\r\n+        label: \"音频格式\",\r\n+        type: \"select\",\r\n+        options: [\r\n+          { label: \"MP3\", value: \"mp3\" },\r\n+          { label: \"AAC\", value: \"aac\" },\r\n+          { label: \"WAV\", value: \"wav\" },\r\n+        ],\r\n+        placeholder: \"选择格式\",\r\n+      },\r\n+    ],\r\n+  },\r\n+  crop: {\r\n+    label: \"裁剪\",\r\n+    params: [\r\n+      {\r\n+        name: \"x\",\r\n+        label: \"起始X\",\r\n+        type: \"number\",\r\n+        min: 0,\r\n+        placeholder: \"如 0\",\r\n+      },\r\n+      {\r\n+        name: \"y\",\r\n+        label: \"起始Y\",\r\n+        type: \"number\",\r\n+        min: 0,\r\n+        placeholder: \"如 0\",\r\n+      },\r\n+      {\r\n+        name: \"width\",\r\n+        label: \"宽度\",\r\n+        type: \"number\",\r\n+        min: 1,\r\n+        placeholder: \"如 640\",\r\n+      },\r\n+      {\r\n+        name: \"height\",\r\n+        label: \"高度\",\r\n+        type: \"number\",\r\n+        min: 1,\r\n+        placeholder: \"如 360\",\r\n+      },\r\n+    ],\r\n+  },\r\n+  \"clip-segment\": {\r\n+    label: \"截取片段\",\r\n+    params: [\r\n+      {\r\n+        name: \"start\",\r\n+        label: \"起始时间(秒)\",\r\n+        type: \"number\",\r\n+        min: 0,\r\n+        placeholder: \"如 10\",\r\n+      },\r\n+      {\r\n+        name: \"duration\",\r\n+        label: \"持续时长(秒)\",\r\n+        type: \"number\",\r\n+        min: 1,\r\n+        placeholder: \"如 30\",\r\n+      },\r\n+    ],\r\n+  },\r\n+  watermark: {\r\n+    label: \"加水印\",\r\n+    params: [\r\n+      {\r\n+        name: \"watermarkText\",\r\n+        label: \"水印文字\",\r\n+        type: \"text\",\r\n+        placeholder: \"如 MyWatermark\",\r\n+      },\r\n+      {\r\n+        name: \"fontSize\",\r\n+        label: \"字体大小\",\r\n+        type: \"number\",\r\n+        min: 10,\r\n+        placeholder: \"如 24\",\r\n+      },\r\n+      {\r\n+        name: \"opacity\",\r\n+        label: \"透明度(0-1)\",\r\n+        type: \"number\",\r\n+        min: 0,\r\n+        max: 1,\r\n+        step: 0.1,\r\n+        placeholder: \"如 0.5\",\r\n+      },\r\n+    ],\r\n+  },\r\n+  convert: {\r\n+    label: \"格式转换\",\r\n+    params: [\r\n+      {\r\n+        name: \"format\",\r\n+        label: \"目标格式\",\r\n+        type: \"select\",\r\n+        options: [\r\n+          { label: \"MP4\", value: \"mp4\" },\r\n+          { label: \"AVI\", value: \"avi\" },\r\n+          { label: \"MOV\", value: \"mov\" },\r\n+          { label: \"MKV\", value: \"mkv\" },\r\n+          { label: \"FLV\", value: \"flv\" },\r\n+        ],\r\n+        placeholder: \"选择格式\",\r\n+      },\r\n+    ],\r\n+  },\r\n+  framerate: {\r\n+    label: \"帧率调整\",\r\n+    params: [\r\n+      {\r\n+        name: \"fps\",\r\n+        label: \"目标帧率\",\r\n+        type: \"number\",\r\n+        min: 1,\r\n+        max: 120,\r\n+        placeholder: \"如 30\",\r\n+      },\r\n+    ],\r\n+  },\r\n+  volume: {\r\n+    label: \"音量调整\",\r\n+    params: [\r\n+      {\r\n+        name: \"volume\",\r\n+        label: \"音量倍数\",\r\n+        type: \"number\",\r\n+        min: 0,\r\n+        max: 10,\r\n+        step: 0.1,\r\n+        placeholder: \"如 1.5\",\r\n+      },\r\n+    ],\r\n+  },\r\n+  gif: {\r\n+    label: \"视频转GIF\",\r\n+    params: [\r\n+      {\r\n+        name: \"start\",\r\n+        label: \"起始时间(秒)\",\r\n+        type: \"number\",\r\n+        min: 0,\r\n+        placeholder: \"如 0\",\r\n+      },\r\n+      {\r\n+        name: \"duration\",\r\n+        label: \"持续时长(秒)\",\r\n+        type: \"number\",\r\n+        min: 1,\r\n+        placeholder: \"如 5\",\r\n+      },\r\n+    ],\r\n+  },\r\n+  cover: {\r\n+    label: \"提取封面\",\r\n+    params: [\r\n+      {\r\n+        name: \"time\",\r\n+        label: \"时间点(秒)\",\r\n+        type: \"number\",\r\n+        min: 0,\r\n+        placeholder: \"如 1\",\r\n+      },\r\n+    ],\r\n+  },\r\n+};\r\n \r\n+const OPERATION_OPTIONS = Object.entries(OPERATION_SCHEMAS).map(\r\n+  ([value, { label }]) => ({ label, value })\r\n+);\r\n+\r\n const FFmpegPanel: React.FC = () => {\r\n   const [operation, setOperation] = useState(\"scale\");\r\n   const [uploadedFile, setUploadedFile] = useState<File | null>(null);\r\n   const [processing, setProcessing] = useState(false);\r\n   const [progress, setProgress] = useState(0);\r\n   const [result, setResult] = useState<string | null>(null);\r\n+  const [form] = Form.useForm();\r\n \r\n-  // 参数区UI根据操作类型动态切换\r\n+  // 根据schema渲染参数表单\r\n   const renderParams = () => {\r\n-    switch (operation) {\r\n-      case \"scale\":\r\n-        return (\r\n-          <>\r\n-            <Form.Item label=\"目标宽度\" name=\"width\">\r\n+    const params = OPERATION_SCHEMAS[operation]?.params || [];\r\n+    return params.map((param) => {\r\n+      switch (param.type) {\r\n+        case \"number\":\r\n+          return (\r\n+            <Form.Item key={param.name} label={param.label} name={param.name}>\r\n               <InputNumber\r\n-                min={1}\r\n-                placeholder=\"如 1280\"\r\n+                min={param.min}\r\n+                max={param.max}\r\n+                step={param.step || 1}\r\n+                placeholder={param.placeholder}\r\n                 style={{ width: \"100%\" }}\r\n               />\r\n             </Form.Item>\r\n-            <Form.Item label=\"目标高度\" name=\"height\">\r\n-              <InputNumber\r\n-                min={1}\r\n-                placeholder=\"如 720\"\r\n-                style={{ width: \"100%\" }}\r\n-              />\r\n+          );\r\n+        case \"select\":\r\n+          return (\r\n+            <Form.Item key={param.name} label={param.label} name={param.name}>\r\n+              <Select placeholder={param.placeholder} options={param.options} />\r\n             </Form.Item>\r\n-          </>\r\n-        );\r\n-      case \"compress\":\r\n-        return (\r\n-          <>\r\n-            <Form.Item label=\"目标码率(kbps)\" name=\"bitrate\">\r\n-              <InputNumber\r\n-                min={100}\r\n-                placeholder=\"如 800\"\r\n-                style={{ width: \"100%\" }}\r\n-              />\r\n+          );\r\n+        case \"text\":\r\n+          return (\r\n+            <Form.Item key={param.name} label={param.label} name={param.name}>\r\n+              <Input placeholder={param.placeholder} />\r\n             </Form.Item>\r\n-          </>\r\n-        );\r\n-      case \"extract-audio\":\r\n-        return (\r\n-          <>\r\n-            <Form.Item label=\"音频格式\" name=\"audioFormat\">\r\n-              <Select placeholder=\"选择格式\">\r\n-                <Option value=\"mp3\">MP3</Option>\r\n-                <Option value=\"aac\">AAC</Option>\r\n-                <Option value=\"wav\">WAV</Option>\r\n-              </Select>\r\n+          );\r\n+        case \"switch\":\r\n+          return (\r\n+            <Form.Item\r\n+              key={param.name}\r\n+              label={param.label}\r\n+              name={param.name}\r\n+              valuePropName=\"checked\"\r\n+            >\r\n+              <Switch />\r\n             </Form.Item>\r\n-          </>\r\n-        );\r\n-      default:\r\n-        return null;\r\n-    }\r\n+          );\r\n+        default:\r\n+          return null;\r\n+      }\r\n+    });\r\n   };\r\n \r\n   // 模拟处理进度\r\n   const handleProcess = () => {\r\n@@ -127,13 +328,16 @@\n             {(uploadedFile.size / 1024 / 1024).toFixed(2)} MB）\r\n           </div>\r\n         )}\r\n       </div>\r\n-      <Form layout=\"vertical\">\r\n+      <Form layout=\"vertical\" form={form}>\r\n         <Form.Item label=\"操作类型\" name=\"operation\">\r\n           <Select\r\n             value={operation}\r\n-            onChange={setOperation}\r\n+            onChange={(value) => {\r\n+              setOperation(value);\r\n+              form.resetFields();\r\n+            }}\r\n             options={OPERATION_OPTIONS}\r\n             style={{ width: \"100%\" }}\r\n           />\r\n         </Form.Item>\r\n"
                },
                {
                    "date": 1748066230116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,12 +16,26 @@\n import React, { useState } from \"react\";\r\n \r\n import FileUploader from \"../FileUploader\";\r\n \r\n-const { Option } = Select;\r\n+// 类型定义\r\n+interface ParamSchema {\r\n+  name: string;\r\n+  label: string;\r\n+  type: string;\r\n+  min?: number;\r\n+  max?: number;\r\n+  step?: number;\r\n+  placeholder?: string;\r\n+  options?: { label: string; value: string }[];\r\n+}\r\n+interface OperationSchema {\r\n+  label: string;\r\n+  params: ParamSchema[];\r\n+}\r\n \r\n // 操作类型与参数schema定义\r\n-const OPERATION_SCHEMAS = {\r\n+const OPERATION_SCHEMAS: Record<string, OperationSchema> = {\r\n   scale: {\r\n     label: \"视频缩放\",\r\n     params: [\r\n       {\r\n@@ -229,9 +243,10 @@\n   ([value, { label }]) => ({ label, value })\r\n );\r\n \r\n const FFmpegPanel: React.FC = () => {\r\n-  const [operation, setOperation] = useState(\"scale\");\r\n+  const [operation, setOperation] =\r\n+    useState<keyof typeof OPERATION_SCHEMAS>(\"scale\");\r\n   const [uploadedFile, setUploadedFile] = useState<File | null>(null);\r\n   const [processing, setProcessing] = useState(false);\r\n   const [progress, setProgress] = useState(0);\r\n   const [result, setResult] = useState<string | null>(null);\r\n@@ -239,9 +254,9 @@\n \r\n   // 根据schema渲染参数表单\r\n   const renderParams = () => {\r\n     const params = OPERATION_SCHEMAS[operation]?.params || [];\r\n-    return params.map((param) => {\r\n+    return params.map((param: ParamSchema) => {\r\n       switch (param.type) {\r\n         case \"number\":\r\n           return (\r\n             <Form.Item key={param.name} label={param.label} name={param.name}>\r\n"
                },
                {
                    "date": 1748066583560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,8 @@\n   message,\r\n } from \"antd\";\r\n import React, { useState } from \"react\";\r\n \r\n-import FileUploader from \"../FileUploader\";\r\n-\r\n // 类型定义\r\n interface ParamSchema {\r\n   name: string;\r\n   label: string;\r\n@@ -245,9 +243,8 @@\n \r\n const FFmpegPanel: React.FC = () => {\r\n   const [operation, setOperation] =\r\n     useState<keyof typeof OPERATION_SCHEMAS>(\"scale\");\r\n-  const [uploadedFile, setUploadedFile] = useState<File | null>(null);\r\n   const [processing, setProcessing] = useState(false);\r\n   const [progress, setProgress] = useState(0);\r\n   const [result, setResult] = useState<string | null>(null);\r\n   const [form] = Form.useForm();\r\n@@ -299,12 +296,8 @@\n   };\r\n \r\n   // 模拟处理进度\r\n   const handleProcess = () => {\r\n-    if (!uploadedFile) {\r\n-      message.warning(\"请先上传文件\");\r\n-      return;\r\n-    }\r\n     setProcessing(true);\r\n     setProgress(0);\r\n     setResult(null);\r\n     let percent = 0;\r\n@@ -319,32 +312,10 @@\n       setProgress(percent);\r\n     }, 500);\r\n   };\r\n \r\n-  // 上传成功回调\r\n-  const handleUploadSuccess = (file: File) => {\r\n-    setUploadedFile(file);\r\n-    message.success(`文件 ${file.name} 上传成功`);\r\n-  };\r\n-\r\n   return (\r\n     <Card className=\"ffmpeg-panel\" title=\"FFmpeg 操作与配置\">\r\n-      <div style={{ marginBottom: 16 }}>\r\n-        <FileUploader\r\n-          accept=\"video/*,audio/*\"\r\n-          maxFileCount={1}\r\n-          onSuccess={handleUploadSuccess}\r\n-          multiple={false}\r\n-          showProgress={true}\r\n-          showFileList={true}\r\n-        />\r\n-        {uploadedFile && (\r\n-          <div style={{ marginTop: 8, color: \"#555\" }}>\r\n-            已上传文件：{uploadedFile.name}（\r\n-            {(uploadedFile.size / 1024 / 1024).toFixed(2)} MB）\r\n-          </div>\r\n-        )}\r\n-      </div>\r\n       <Form layout=\"vertical\" form={form}>\r\n         <Form.Item label=\"操作类型\" name=\"operation\">\r\n           <Select\r\n             value={operation}\r\n"
                },
                {
                    "date": 1748066589534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n   InputNumber,\r\n   Progress,\r\n   Select,\r\n   Switch,\r\n-  message,\r\n } from \"antd\";\r\n import React, { useState } from \"react\";\r\n \r\n // 类型定义\r\n"
                },
                {
                    "date": 1748082954123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,360 +3,194 @@\n import {\r\n   Alert,\r\n   Button,\r\n   Card,\r\n+  Checkbox,\r\n   Divider,\r\n+  Dropdown,\r\n   Form,\r\n   Input,\r\n   InputNumber,\r\n+  Menu,\r\n   Progress,\r\n   Select,\r\n+  Space,\r\n   Switch,\r\n+  message,\r\n } from \"antd\";\r\n-import React, { useState } from \"react\";\r\n+import React, { useEffect } from \"react\";\r\n \r\n-// 类型定义\r\n-interface ParamSchema {\r\n-  name: string;\r\n-  label: string;\r\n-  type: string;\r\n-  min?: number;\r\n-  max?: number;\r\n-  step?: number;\r\n-  placeholder?: string;\r\n-  options?: { label: string; value: string }[];\r\n-}\r\n-interface OperationSchema {\r\n-  label: string;\r\n-  params: ParamSchema[];\r\n-}\r\n+import { FFmpegOperationType } from \"./types\";\r\n+import { OPERATION_SCHEMAS } from \"./schemas\";\r\n+import { useFFmpegPanelStore } from \"./store\";\r\n \r\n-// 操作类型与参数schema定义\r\n-const OPERATION_SCHEMAS: Record<string, OperationSchema> = {\r\n-  scale: {\r\n-    label: \"视频缩放\",\r\n-    params: [\r\n-      {\r\n-        name: \"width\",\r\n-        label: \"目标宽度\",\r\n-        type: \"number\",\r\n-        min: 1,\r\n-        placeholder: \"如 1280\",\r\n-      },\r\n-      {\r\n-        name: \"height\",\r\n-        label: \"目标高度\",\r\n-        type: \"number\",\r\n-        min: 1,\r\n-        placeholder: \"如 720\",\r\n-      },\r\n-    ],\r\n-  },\r\n-  compress: {\r\n-    label: \"视频压缩\",\r\n-    params: [\r\n-      {\r\n-        name: \"bitrate\",\r\n-        label: \"目标码率(kbps)\",\r\n-        type: \"number\",\r\n-        min: 100,\r\n-        placeholder: \"如 800\",\r\n-      },\r\n-    ],\r\n-  },\r\n-  \"extract-audio\": {\r\n-    label: \"转出音频\",\r\n-    params: [\r\n-      {\r\n-        name: \"audioFormat\",\r\n-        label: \"音频格式\",\r\n-        type: \"select\",\r\n-        options: [\r\n-          { label: \"MP3\", value: \"mp3\" },\r\n-          { label: \"AAC\", value: \"aac\" },\r\n-          { label: \"WAV\", value: \"wav\" },\r\n-        ],\r\n-        placeholder: \"选择格式\",\r\n-      },\r\n-    ],\r\n-  },\r\n-  crop: {\r\n-    label: \"裁剪\",\r\n-    params: [\r\n-      {\r\n-        name: \"x\",\r\n-        label: \"起始X\",\r\n-        type: \"number\",\r\n-        min: 0,\r\n-        placeholder: \"如 0\",\r\n-      },\r\n-      {\r\n-        name: \"y\",\r\n-        label: \"起始Y\",\r\n-        type: \"number\",\r\n-        min: 0,\r\n-        placeholder: \"如 0\",\r\n-      },\r\n-      {\r\n-        name: \"width\",\r\n-        label: \"宽度\",\r\n-        type: \"number\",\r\n-        min: 1,\r\n-        placeholder: \"如 640\",\r\n-      },\r\n-      {\r\n-        name: \"height\",\r\n-        label: \"高度\",\r\n-        type: \"number\",\r\n-        min: 1,\r\n-        placeholder: \"如 360\",\r\n-      },\r\n-    ],\r\n-  },\r\n-  \"clip-segment\": {\r\n-    label: \"截取片段\",\r\n-    params: [\r\n-      {\r\n-        name: \"start\",\r\n-        label: \"起始时间(秒)\",\r\n-        type: \"number\",\r\n-        min: 0,\r\n-        placeholder: \"如 10\",\r\n-      },\r\n-      {\r\n-        name: \"duration\",\r\n-        label: \"持续时长(秒)\",\r\n-        type: \"number\",\r\n-        min: 1,\r\n-        placeholder: \"如 30\",\r\n-      },\r\n-    ],\r\n-  },\r\n-  watermark: {\r\n-    label: \"加水印\",\r\n-    params: [\r\n-      {\r\n-        name: \"watermarkText\",\r\n-        label: \"水印文字\",\r\n-        type: \"text\",\r\n-        placeholder: \"如 MyWatermark\",\r\n-      },\r\n-      {\r\n-        name: \"fontSize\",\r\n-        label: \"字体大小\",\r\n-        type: \"number\",\r\n-        min: 10,\r\n-        placeholder: \"如 24\",\r\n-      },\r\n-      {\r\n-        name: \"opacity\",\r\n-        label: \"透明度(0-1)\",\r\n-        type: \"number\",\r\n-        min: 0,\r\n-        max: 1,\r\n-        step: 0.1,\r\n-        placeholder: \"如 0.5\",\r\n-      },\r\n-    ],\r\n-  },\r\n-  convert: {\r\n-    label: \"格式转换\",\r\n-    params: [\r\n-      {\r\n-        name: \"format\",\r\n-        label: \"目标格式\",\r\n-        type: \"select\",\r\n-        options: [\r\n-          { label: \"MP4\", value: \"mp4\" },\r\n-          { label: \"AVI\", value: \"avi\" },\r\n-          { label: \"MOV\", value: \"mov\" },\r\n-          { label: \"MKV\", value: \"mkv\" },\r\n-          { label: \"FLV\", value: \"flv\" },\r\n-        ],\r\n-        placeholder: \"选择格式\",\r\n-      },\r\n-    ],\r\n-  },\r\n-  framerate: {\r\n-    label: \"帧率调整\",\r\n-    params: [\r\n-      {\r\n-        name: \"fps\",\r\n-        label: \"目标帧率\",\r\n-        type: \"number\",\r\n-        min: 1,\r\n-        max: 120,\r\n-        placeholder: \"如 30\",\r\n-      },\r\n-    ],\r\n-  },\r\n-  volume: {\r\n-    label: \"音量调整\",\r\n-    params: [\r\n-      {\r\n-        name: \"volume\",\r\n-        label: \"音量倍数\",\r\n-        type: \"number\",\r\n-        min: 0,\r\n-        max: 10,\r\n-        step: 0.1,\r\n-        placeholder: \"如 1.5\",\r\n-      },\r\n-    ],\r\n-  },\r\n-  gif: {\r\n-    label: \"视频转GIF\",\r\n-    params: [\r\n-      {\r\n-        name: \"start\",\r\n-        label: \"起始时间(秒)\",\r\n-        type: \"number\",\r\n-        min: 0,\r\n-        placeholder: \"如 0\",\r\n-      },\r\n-      {\r\n-        name: \"duration\",\r\n-        label: \"持续时长(秒)\",\r\n-        type: \"number\",\r\n-        min: 1,\r\n-        placeholder: \"如 5\",\r\n-      },\r\n-    ],\r\n-  },\r\n-  cover: {\r\n-    label: \"提取封面\",\r\n-    params: [\r\n-      {\r\n-        name: \"time\",\r\n-        label: \"时间点(秒)\",\r\n-        type: \"number\",\r\n-        min: 0,\r\n-        placeholder: \"如 1\",\r\n-      },\r\n-    ],\r\n-  },\r\n-};\r\n-\r\n-const OPERATION_OPTIONS = Object.entries(OPERATION_SCHEMAS).map(\r\n-  ([value, { label }]) => ({ label, value })\r\n-);\r\n-\r\n const FFmpegPanel: React.FC = () => {\r\n-  const [operation, setOperation] =\r\n-    useState<keyof typeof OPERATION_SCHEMAS>(\"scale\");\r\n-  const [processing, setProcessing] = useState(false);\r\n-  const [progress, setProgress] = useState(0);\r\n-  const [result, setResult] = useState<string | null>(null);\r\n   const [form] = Form.useForm();\r\n+  const {\r\n+    selectedOperations,\r\n+    paramValues,\r\n+    templates,\r\n+    currentTemplateId,\r\n+    setSelectedOperations,\r\n+    setParamValues,\r\n+    saveTemplate,\r\n+    deleteTemplate,\r\n+    applyTemplate,\r\n+  } = useFFmpegPanelStore();\r\n \r\n-  // 根据schema渲染参数表单\r\n-  const renderParams = () => {\r\n-    const params = OPERATION_SCHEMAS[operation]?.params || [];\r\n-    return params.map((param: ParamSchema) => {\r\n-      switch (param.type) {\r\n-        case \"number\":\r\n-          return (\r\n-            <Form.Item key={param.name} label={param.label} name={param.name}>\r\n-              <InputNumber\r\n-                min={param.min}\r\n-                max={param.max}\r\n-                step={param.step || 1}\r\n-                placeholder={param.placeholder}\r\n-                style={{ width: \"100%\" }}\r\n-              />\r\n-            </Form.Item>\r\n-          );\r\n-        case \"select\":\r\n-          return (\r\n-            <Form.Item key={param.name} label={param.label} name={param.name}>\r\n-              <Select placeholder={param.placeholder} options={param.options} />\r\n-            </Form.Item>\r\n-          );\r\n-        case \"text\":\r\n-          return (\r\n-            <Form.Item key={param.name} label={param.label} name={param.name}>\r\n-              <Input placeholder={param.placeholder} />\r\n-            </Form.Item>\r\n-          );\r\n-        case \"switch\":\r\n-          return (\r\n-            <Form.Item\r\n-              key={param.name}\r\n-              label={param.label}\r\n-              name={param.name}\r\n-              valuePropName=\"checked\"\r\n-            >\r\n-              <Switch />\r\n-            </Form.Item>\r\n-          );\r\n-        default:\r\n-          return null;\r\n-      }\r\n-    });\r\n+  // 合并所有选中操作类型的参数schema\r\n+  const mergedParams = selectedOperations\r\n+    .map((op) => OPERATION_SCHEMAS[op]?.params || [])\r\n+    .flat();\r\n+\r\n+  // 处理参数表单变更\r\n+  const handleValuesChange = (changed: any, all: any) => {\r\n+    setParamValues(all);\r\n   };\r\n \r\n-  // 模拟处理进度\r\n-  const handleProcess = () => {\r\n-    setProcessing(true);\r\n-    setProgress(0);\r\n-    setResult(null);\r\n-    let percent = 0;\r\n-    const timer = setInterval(() => {\r\n-      percent += Math.random() * 20;\r\n-      if (percent >= 100) {\r\n-        percent = 100;\r\n-        clearInterval(timer);\r\n-        setProcessing(false);\r\n-        setResult(\"处理完成，结果文件下载链接/预览（占位）\");\r\n-      }\r\n-      setProgress(percent);\r\n-    }, 500);\r\n+  // 处理操作类型多选\r\n+  const handleOperationChange = (ops: FFmpegOperationType[]) => {\r\n+    setSelectedOperations(ops);\r\n+    // 清空参数表单\r\n+    form.resetFields();\r\n+    setParamValues({});\r\n   };\r\n \r\n+  // 模板保存\r\n+  const handleSaveTemplate = () => {\r\n+    const name = prompt(\"请输入模板名称\");\r\n+    if (!name) return;\r\n+    saveTemplate({\r\n+      name,\r\n+      operations: selectedOperations,\r\n+      params: paramValues,\r\n+    });\r\n+    message.success(\"模板已保存\");\r\n+  };\r\n+\r\n+  // 模板下拉菜单\r\n+  const menu = (\r\n+    <Menu>\r\n+      {templates.map((tpl) => (\r\n+        <Menu.Item key={tpl.id} onClick={() => applyTemplate(tpl.id)}>\r\n+          {tpl.name}\r\n+          <Button\r\n+            type=\"link\"\r\n+            size=\"small\"\r\n+            danger\r\n+            style={{ float: \"right\" }}\r\n+            onClick={(e) => {\r\n+              e.stopPropagation();\r\n+              deleteTemplate(tpl.id);\r\n+            }}\r\n+          >\r\n+            删除\r\n+          </Button>\r\n+        </Menu.Item>\r\n+      ))}\r\n+    </Menu>\r\n+  );\r\n+\r\n+  // 表单初始值同步\r\n+  useEffect(() => {\r\n+    form.setFieldsValue(paramValues);\r\n+  }, [paramValues, form]);\r\n+\r\n   return (\r\n     <Card className=\"ffmpeg-panel\" title=\"FFmpeg 操作与配置\">\r\n-      <Form layout=\"vertical\" form={form}>\r\n-        <Form.Item label=\"操作类型\" name=\"operation\">\r\n-          <Select\r\n-            value={operation}\r\n-            onChange={(value) => {\r\n-              setOperation(value);\r\n-              form.resetFields();\r\n-            }}\r\n-            options={OPERATION_OPTIONS}\r\n-            style={{ width: \"100%\" }}\r\n-          />\r\n-        </Form.Item>\r\n-        {renderParams()}\r\n+      <Space style={{ marginBottom: 16 }}>\r\n+        <Checkbox.Group\r\n+          options={Object.entries(OPERATION_SCHEMAS).map(\r\n+            ([value, { label }]) => ({ label, value })\r\n+          )}\r\n+          value={selectedOperations}\r\n+          onChange={handleOperationChange}\r\n+        />\r\n+        <Button\r\n+          onClick={handleSaveTemplate}\r\n+          disabled={selectedOperations.length === 0}\r\n+        >\r\n+          保存为模板\r\n+        </Button>\r\n+        <Dropdown overlay={menu} placement=\"bottomLeft\">\r\n+          <Button>模板</Button>\r\n+        </Dropdown>\r\n+      </Space>\r\n+      <Form\r\n+        layout=\"vertical\"\r\n+        form={form}\r\n+        initialValues={paramValues}\r\n+        onValuesChange={handleValuesChange}\r\n+      >\r\n+        {mergedParams.map((param) => {\r\n+          switch (param.type) {\r\n+            case \"number\":\r\n+              return (\r\n+                <Form.Item\r\n+                  key={param.name}\r\n+                  label={param.label}\r\n+                  name={param.name}\r\n+                >\r\n+                  <InputNumber\r\n+                    min={param.min}\r\n+                    max={param.max}\r\n+                    step={param.step || 1}\r\n+                    placeholder={param.placeholder}\r\n+                    style={{ width: \"100%\" }}\r\n+                  />\r\n+                </Form.Item>\r\n+              );\r\n+            case \"select\":\r\n+              return (\r\n+                <Form.Item\r\n+                  key={param.name}\r\n+                  label={param.label}\r\n+                  name={param.name}\r\n+                >\r\n+                  <Select\r\n+                    placeholder={param.placeholder}\r\n+                    options={param.options}\r\n+                  />\r\n+                </Form.Item>\r\n+              );\r\n+            case \"text\":\r\n+              return (\r\n+                <Form.Item\r\n+                  key={param.name}\r\n+                  label={param.label}\r\n+                  name={param.name}\r\n+                >\r\n+                  <Input placeholder={param.placeholder} />\r\n+                </Form.Item>\r\n+              );\r\n+            case \"switch\":\r\n+              return (\r\n+                <Form.Item\r\n+                  key={param.name}\r\n+                  label={param.label}\r\n+                  name={param.name}\r\n+                  valuePropName=\"checked\"\r\n+                >\r\n+                  <Switch />\r\n+                </Form.Item>\r\n+              );\r\n+            default:\r\n+              return null;\r\n+          }\r\n+        })}\r\n         <Divider />\r\n         <Form.Item>\r\n-          <Button type=\"primary\" onClick={handleProcess} loading={processing}>\r\n-            {processing ? \"处理中...\" : \"开始处理\"}\r\n+          <Button type=\"primary\" disabled>\r\n+            处理（仅UI，待对接）\r\n           </Button>\r\n         </Form.Item>\r\n       </Form>\r\n       <Divider />\r\n-      {processing && (\r\n-        <Progress\r\n-          percent={Math.round(progress)}\r\n-          status={progress < 100 ? \"active\" : \"success\"}\r\n-        />\r\n-      )}\r\n-      {result && (\r\n-        <Alert\r\n-          message={result}\r\n-          type=\"success\"\r\n-          showIcon\r\n-          style={{ marginTop: 16 }}\r\n-        />\r\n-      )}\r\n-      {!processing && !result && (\r\n-        <Alert\r\n-          message=\"处理进度与结果将在此展示（UI占位）\"\r\n-          type=\"info\"\r\n-          showIcon\r\n-        />\r\n-      )}\r\n+      <Alert\r\n+        message=\"处理进度与结果将在此展示（UI占位）\"\r\n+        type=\"info\"\r\n+        showIcon\r\n+      />\r\n     </Card>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1748083059405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n   Form,\r\n   Input,\r\n   InputNumber,\r\n   Menu,\r\n-  Progress,\r\n   Select,\r\n   Space,\r\n   Switch,\r\n   message,\r\n@@ -28,9 +27,8 @@\n   const {\r\n     selectedOperations,\r\n     paramValues,\r\n     templates,\r\n-    currentTemplateId,\r\n     setSelectedOperations,\r\n     setParamValues,\r\n     saveTemplate,\r\n     deleteTemplate,\r\n@@ -42,16 +40,18 @@\n     .map((op) => OPERATION_SCHEMAS[op]?.params || [])\r\n     .flat();\r\n \r\n   // 处理参数表单变更\r\n-  const handleValuesChange = (changed: any, all: any) => {\r\n+  const handleValuesChange = (\r\n+    _changed: Record<string, unknown>,\r\n+    all: Record<string, unknown>\r\n+  ) => {\r\n     setParamValues(all);\r\n   };\r\n \r\n   // 处理操作类型多选\r\n-  const handleOperationChange = (ops: FFmpegOperationType[]) => {\r\n+  const handleOperationChange = (ops: Array<FFmpegOperationType>) => {\r\n     setSelectedOperations(ops);\r\n-    // 清空参数表单\r\n     form.resetFields();\r\n     setParamValues({});\r\n   };\r\n \r\n@@ -99,9 +99,12 @@\n     <Card className=\"ffmpeg-panel\" title=\"FFmpeg 操作与配置\">\r\n       <Space style={{ marginBottom: 16 }}>\r\n         <Checkbox.Group\r\n           options={Object.entries(OPERATION_SCHEMAS).map(\r\n-            ([value, { label }]) => ({ label, value })\r\n+            ([value, { label }]) => ({\r\n+              label,\r\n+              value: value as FFmpegOperationType,\r\n+            })\r\n           )}\r\n           value={selectedOperations}\r\n           onChange={handleOperationChange}\r\n         />\r\n@@ -110,9 +113,9 @@\n           disabled={selectedOperations.length === 0}\r\n         >\r\n           保存为模板\r\n         </Button>\r\n-        <Dropdown overlay={menu} placement=\"bottomLeft\">\r\n+        <Dropdown menu={menu} placement=\"bottomLeft\">\r\n           <Button>模板</Button>\r\n         </Dropdown>\r\n       </Space>\r\n       <Form\r\n"
                },
                {
                    "date": 1748083072901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,30 +66,29 @@\n     });\r\n     message.success(\"模板已保存\");\r\n   };\r\n \r\n-  // 模板下拉菜单\r\n-  const menu = (\r\n-    <Menu>\r\n-      {templates.map((tpl) => (\r\n-        <Menu.Item key={tpl.id} onClick={() => applyTemplate(tpl.id)}>\r\n-          {tpl.name}\r\n-          <Button\r\n-            type=\"link\"\r\n-            size=\"small\"\r\n-            danger\r\n-            style={{ float: \"right\" }}\r\n-            onClick={(e) => {\r\n-              e.stopPropagation();\r\n-              deleteTemplate(tpl.id);\r\n-            }}\r\n-          >\r\n-            删除\r\n-          </Button>\r\n-        </Menu.Item>\r\n-      ))}\r\n-    </Menu>\r\n-  );\r\n+  // 模板下拉菜单items\r\n+  const menuItems = templates.map((tpl) => ({\r\n+    key: tpl.id,\r\n+    label: (\r\n+      <span onClick={() => applyTemplate(tpl.id)}>\r\n+        {tpl.name}\r\n+        <Button\r\n+          type=\"link\"\r\n+          size=\"small\"\r\n+          danger\r\n+          style={{ float: \"right\" }}\r\n+          onClick={(e) => {\r\n+            e.stopPropagation();\r\n+            deleteTemplate(tpl.id);\r\n+          }}\r\n+        >\r\n+          删除\r\n+        </Button>\r\n+      </span>\r\n+    ),\r\n+  }));\r\n \r\n   // 表单初始值同步\r\n   useEffect(() => {\r\n     form.setFieldsValue(paramValues);\r\n@@ -113,9 +112,9 @@\n           disabled={selectedOperations.length === 0}\r\n         >\r\n           保存为模板\r\n         </Button>\r\n-        <Dropdown menu={menu} placement=\"bottomLeft\">\r\n+        <Dropdown menu={{ items: menuItems }} placement=\"bottomLeft\">\r\n           <Button>模板</Button>\r\n         </Dropdown>\r\n       </Space>\r\n       <Form\r\n"
                },
                {
                    "date": 1748083087310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,8 @@\n   Dropdown,\r\n   Form,\r\n   Input,\r\n   InputNumber,\r\n-  Menu,\r\n   Select,\r\n   Space,\r\n   Switch,\r\n   message,\r\n"
                },
                {
                    "date": 1748083221536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,12 @@\n import { FFmpegOperationType } from \"./types\";\r\n import { OPERATION_SCHEMAS } from \"./schemas\";\r\n import { useFFmpegPanelStore } from \"./store\";\r\n \r\n+// paramValues结构：{ [operation]: { [param]: value } }\r\n+\r\n+type ParamValues = Record<string, Record<string, unknown>>;\r\n+\r\n const FFmpegPanel: React.FC = () => {\r\n   const [form] = Form.useForm();\r\n   const {\r\n     selectedOperations,\r\n@@ -33,18 +37,10 @@\n     deleteTemplate,\r\n     applyTemplate,\r\n   } = useFFmpegPanelStore();\r\n \r\n-  // 合并所有选中操作类型的参数schema\r\n-  const mergedParams = selectedOperations\r\n-    .map((op) => OPERATION_SCHEMAS[op]?.params || [])\r\n-    .flat();\r\n-\r\n   // 处理参数表单变更\r\n-  const handleValuesChange = (\r\n-    _changed: Record<string, unknown>,\r\n-    all: Record<string, unknown>\r\n-  ) => {\r\n+  const handleValuesChange = (_changed: ParamValues, all: ParamValues) => {\r\n     setParamValues(all);\r\n   };\r\n \r\n   // 处理操作类型多选\r\n@@ -121,64 +117,56 @@\n         form={form}\r\n         initialValues={paramValues}\r\n         onValuesChange={handleValuesChange}\r\n       >\r\n-        {mergedParams.map((param) => {\r\n-          switch (param.type) {\r\n-            case \"number\":\r\n-              return (\r\n-                <Form.Item\r\n-                  key={param.name}\r\n-                  label={param.label}\r\n-                  name={param.name}\r\n-                >\r\n-                  <InputNumber\r\n-                    min={param.min}\r\n-                    max={param.max}\r\n-                    step={param.step || 1}\r\n-                    placeholder={param.placeholder}\r\n-                    style={{ width: \"100%\" }}\r\n-                  />\r\n-                </Form.Item>\r\n-              );\r\n-            case \"select\":\r\n-              return (\r\n-                <Form.Item\r\n-                  key={param.name}\r\n-                  label={param.label}\r\n-                  name={param.name}\r\n-                >\r\n-                  <Select\r\n-                    placeholder={param.placeholder}\r\n-                    options={param.options}\r\n-                  />\r\n-                </Form.Item>\r\n-              );\r\n-            case \"text\":\r\n-              return (\r\n-                <Form.Item\r\n-                  key={param.name}\r\n-                  label={param.label}\r\n-                  name={param.name}\r\n-                >\r\n-                  <Input placeholder={param.placeholder} />\r\n-                </Form.Item>\r\n-              );\r\n-            case \"switch\":\r\n-              return (\r\n-                <Form.Item\r\n-                  key={param.name}\r\n-                  label={param.label}\r\n-                  name={param.name}\r\n-                  valuePropName=\"checked\"\r\n-                >\r\n-                  <Switch />\r\n-                </Form.Item>\r\n-              );\r\n-            default:\r\n-              return null;\r\n-          }\r\n-        })}\r\n+        {selectedOperations.map((op) =>\r\n+          (OPERATION_SCHEMAS[op]?.params || []).map((param) => {\r\n+            const itemName = [op, param.name];\r\n+            const itemKey = `${op}_${param.name}`;\r\n+            switch (param.type) {\r\n+              case \"number\":\r\n+                return (\r\n+                  <Form.Item key={itemKey} label={param.label} name={itemName}>\r\n+                    <InputNumber\r\n+                      min={param.min}\r\n+                      max={param.max}\r\n+                      step={param.step || 1}\r\n+                      placeholder={param.placeholder}\r\n+                      style={{ width: \"100%\" }}\r\n+                    />\r\n+                  </Form.Item>\r\n+                );\r\n+              case \"select\":\r\n+                return (\r\n+                  <Form.Item key={itemKey} label={param.label} name={itemName}>\r\n+                    <Select\r\n+                      placeholder={param.placeholder}\r\n+                      options={param.options}\r\n+                    />\r\n+                  </Form.Item>\r\n+                );\r\n+              case \"text\":\r\n+                return (\r\n+                  <Form.Item key={itemKey} label={param.label} name={itemName}>\r\n+                    <Input placeholder={param.placeholder} />\r\n+                  </Form.Item>\r\n+                );\r\n+              case \"switch\":\r\n+                return (\r\n+                  <Form.Item\r\n+                    key={itemKey}\r\n+                    label={param.label}\r\n+                    name={itemName}\r\n+                    valuePropName=\"checked\"\r\n+                  >\r\n+                    <Switch />\r\n+                  </Form.Item>\r\n+                );\r\n+              default:\r\n+                return null;\r\n+            }\r\n+          })\r\n+        )}\r\n         <Divider />\r\n         <Form.Item>\r\n           <Button type=\"primary\" disabled>\r\n             处理（仅UI，待对接）\r\n"
                },
                {
                    "date": 1748083321355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,17 +65,18 @@\n   // 模板下拉菜单items\r\n   const menuItems = templates.map((tpl) => ({\r\n     key: tpl.id,\r\n     label: (\r\n-      <span onClick={() => applyTemplate(tpl.id)}>\r\n-        {tpl.name}\r\n+      <span>\r\n+        <span onClick={() => applyTemplate(tpl.id)}>{tpl.name}</span>\r\n         <Button\r\n           type=\"link\"\r\n           size=\"small\"\r\n           danger\r\n           style={{ float: \"right\" }}\r\n           onClick={(e) => {\r\n             e.stopPropagation();\r\n+            // 预留：可在此调用后端删除接口\r\n             deleteTemplate(tpl.id);\r\n           }}\r\n         >\r\n           删除\r\n"
                },
                {
                    "date": 1748083552446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,14 +9,17 @@\n   Dropdown,\r\n   Form,\r\n   Input,\r\n   InputNumber,\r\n+  List,\r\n+  Modal,\r\n+  Popconfirm,\r\n   Select,\r\n   Space,\r\n   Switch,\r\n   message,\r\n } from \"antd\";\r\n-import React, { useEffect } from \"react\";\r\n+import React, { useEffect, useState } from \"react\";\r\n \r\n import { FFmpegOperationType } from \"./types\";\r\n import { OPERATION_SCHEMAS } from \"./schemas\";\r\n import { useFFmpegPanelStore } from \"./store\";\r\n@@ -37,8 +40,14 @@\n     deleteTemplate,\r\n     applyTemplate,\r\n   } = useFFmpegPanelStore();\r\n \r\n+  // 模板管理弹窗\r\n+  const [modalOpen, setModalOpen] = useState(false);\r\n+  const [editingId, setEditingId] = useState<string | null>(null);\r\n+  const [editingName, setEditingName] = useState(\"\");\r\n+  const [newTplName, setNewTplName] = useState(\"\");\r\n+\r\n   // 处理参数表单变更\r\n   const handleValuesChange = (_changed: ParamValues, all: ParamValues) => {\r\n     setParamValues(all);\r\n   };\r\n@@ -51,40 +60,41 @@\n   };\r\n \r\n   // 模板保存\r\n   const handleSaveTemplate = () => {\r\n-    const name = prompt(\"请输入模板名称\");\r\n-    if (!name) return;\r\n+    setModalOpen(true);\r\n+  };\r\n+\r\n+  // 新建模板\r\n+  const handleCreateTemplate = () => {\r\n+    if (!newTplName.trim()) {\r\n+      message.warning(\"请输入模板名称\");\r\n+      return;\r\n+    }\r\n     saveTemplate({\r\n-      name,\r\n+      name: newTplName.trim(),\r\n       operations: selectedOperations,\r\n       params: paramValues,\r\n     });\r\n+    setNewTplName(\"\");\r\n     message.success(\"模板已保存\");\r\n   };\r\n \r\n-  // 模板下拉菜单items\r\n-  const menuItems = templates.map((tpl) => ({\r\n-    key: tpl.id,\r\n-    label: (\r\n-      <span>\r\n-        <span onClick={() => applyTemplate(tpl.id)}>{tpl.name}</span>\r\n-        <Button\r\n-          type=\"link\"\r\n-          size=\"small\"\r\n-          danger\r\n-          style={{ float: \"right\" }}\r\n-          onClick={(e) => {\r\n-            e.stopPropagation();\r\n-            // 预留：可在此调用后端删除接口\r\n-            deleteTemplate(tpl.id);\r\n-          }}\r\n-        >\r\n-          删除\r\n-        </Button>\r\n-      </span>\r\n-    ),\r\n-  }));\r\n+  // 重命名模板\r\n+  const handleRename = (id: string) => {\r\n+    if (!editingName.trim()) {\r\n+      message.warning(\"请输入新名称\");\r\n+      return;\r\n+    }\r\n+    // 这里只做本地重命名，后续可对接接口\r\n+    const tpl = templates.find((t) => t.id === id);\r\n+    if (tpl) {\r\n+      tpl.name = editingName.trim();\r\n+      message.success(\"模板已重命名\");\r\n+    }\r\n+    setEditingId(null);\r\n+    setEditingName(\"\");\r\n+  };\r\n \r\n   // 表单初始值同步\r\n   useEffect(() => {\r\n     form.setFieldsValue(paramValues);\r\n@@ -106,13 +116,10 @@\n         <Button\r\n           onClick={handleSaveTemplate}\r\n           disabled={selectedOperations.length === 0}\r\n         >\r\n-          保存为模板\r\n+          模板\r\n         </Button>\r\n-        <Dropdown menu={{ items: menuItems }} placement=\"bottomLeft\">\r\n-          <Button>模板</Button>\r\n-        </Dropdown>\r\n       </Space>\r\n       <Form\r\n         layout=\"vertical\"\r\n         form={form}\r\n@@ -179,8 +186,89 @@\n         message=\"处理进度与结果将在此展示（UI占位）\"\r\n         type=\"info\"\r\n         showIcon\r\n       />\r\n+      <Modal\r\n+        title=\"模板管理\"\r\n+        open={modalOpen}\r\n+        onCancel={() => {\r\n+          setModalOpen(false);\r\n+          setEditingId(null);\r\n+          setEditingName(\"\");\r\n+        }}\r\n+        footer={null}\r\n+      >\r\n+        <div style={{ marginBottom: 16 }}>\r\n+          <Input\r\n+            placeholder=\"新模板名称\"\r\n+            value={newTplName}\r\n+            onChange={(e) => setNewTplName(e.target.value)}\r\n+            style={{ width: 200, marginRight: 8 }}\r\n+            onPressEnter={handleCreateTemplate}\r\n+          />\r\n+          <Button type=\"primary\" onClick={handleCreateTemplate}>\r\n+            新建模板\r\n+          </Button>\r\n+        </div>\r\n+        <List\r\n+          bordered\r\n+          dataSource={templates}\r\n+          renderItem={(tpl) => (\r\n+            <List.Item\r\n+              actions={[\r\n+                editingId === tpl.id ? (\r\n+                  <>\r\n+                    <Input\r\n+                      size=\"small\"\r\n+                      value={editingName}\r\n+                      onChange={(e) => setEditingName(e.target.value)}\r\n+                      style={{ width: 100, marginRight: 8 }}\r\n+                      onPressEnter={() => handleRename(tpl.id)}\r\n+                    />\r\n+                    <Button\r\n+                      size=\"small\"\r\n+                      type=\"primary\"\r\n+                      onClick={() => handleRename(tpl.id)}\r\n+                    >\r\n+                      保存\r\n+                    </Button>\r\n+                  </>\r\n+                ) : (\r\n+                  <Button\r\n+                    size=\"small\"\r\n+                    onClick={() => {\r\n+                      setEditingId(tpl.id);\r\n+                      setEditingName(tpl.name);\r\n+                    }}\r\n+                  >\r\n+                    重命名\r\n+                  </Button>\r\n+                ),\r\n+                <Button\r\n+                  size=\"small\"\r\n+                  onClick={() => {\r\n+                    applyTemplate(tpl.id);\r\n+                    setModalOpen(false);\r\n+                  }}\r\n+                >\r\n+                  应用\r\n+                </Button>,\r\n+                <Popconfirm\r\n+                  title=\"确定删除该模板？\"\r\n+                  onConfirm={() => deleteTemplate(tpl.id)}\r\n+                >\r\n+                  <Button size=\"small\" danger>\r\n+                    删除\r\n+                  </Button>\r\n+                </Popconfirm>,\r\n+              ]}\r\n+            >\r\n+              {editingId === tpl.id ? null : tpl.name}\r\n+            </List.Item>\r\n+          )}\r\n+          locale={{ emptyText: \"暂无模板\" }}\r\n+        />\r\n+      </Modal>\r\n     </Card>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1748083558008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,8 @@\n   Button,\r\n   Card,\r\n   Checkbox,\r\n   Divider,\r\n-  Dropdown,\r\n   Form,\r\n   Input,\r\n   InputNumber,\r\n   List,\r\n"
                },
                {
                    "date": 1748083795666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,15 +4,17 @@\n   Alert,\r\n   Button,\r\n   Card,\r\n   Checkbox,\r\n+  Col,\r\n   Divider,\r\n   Form,\r\n   Input,\r\n   InputNumber,\r\n   List,\r\n   Modal,\r\n   Popconfirm,\r\n+  Row,\r\n   Select,\r\n   Space,\r\n   Switch,\r\n   message,\r\n@@ -98,8 +100,94 @@\n   useEffect(() => {\r\n     form.setFieldsValue(paramValues);\r\n   }, [paramValues, form]);\r\n \r\n+  // 渲染参数表单项，2列布局\r\n+  const renderParamItems = () => {\r\n+    const items: React.ReactNode[] = [];\r\n+    selectedOperations.forEach((op) => {\r\n+      (OPERATION_SCHEMAS[op]?.params || []).forEach((param) => {\r\n+        const itemName = [op, param.name];\r\n+        const itemKey = `${op}_${param.name}`;\r\n+        let node: React.ReactNode = null;\r\n+        switch (param.type) {\r\n+          case \"number\":\r\n+            node = (\r\n+              <Form.Item\r\n+                key={itemKey}\r\n+                label={param.label}\r\n+                name={itemName}\r\n+                style={{ marginBottom: 0 }}\r\n+              >\r\n+                <InputNumber\r\n+                  min={param.min}\r\n+                  max={param.max}\r\n+                  step={param.step || 1}\r\n+                  placeholder={param.placeholder}\r\n+                  style={{ width: \"100%\" }}\r\n+                />\r\n+              </Form.Item>\r\n+            );\r\n+            break;\r\n+          case \"select\":\r\n+            node = (\r\n+              <Form.Item\r\n+                key={itemKey}\r\n+                label={param.label}\r\n+                name={itemName}\r\n+                style={{ marginBottom: 0 }}\r\n+              >\r\n+                <Select\r\n+                  placeholder={param.placeholder}\r\n+                  options={param.options}\r\n+                />\r\n+              </Form.Item>\r\n+            );\r\n+            break;\r\n+          case \"text\":\r\n+            node = (\r\n+              <Form.Item\r\n+                key={itemKey}\r\n+                label={param.label}\r\n+                name={itemName}\r\n+                style={{ marginBottom: 0 }}\r\n+              >\r\n+                <Input placeholder={param.placeholder} />\r\n+              </Form.Item>\r\n+            );\r\n+            break;\r\n+          case \"switch\":\r\n+            node = (\r\n+              <Form.Item\r\n+                key={itemKey}\r\n+                label={param.label}\r\n+                name={itemName}\r\n+                valuePropName=\"checked\"\r\n+                style={{ marginBottom: 0 }}\r\n+              >\r\n+                <Switch />\r\n+              </Form.Item>\r\n+            );\r\n+            break;\r\n+          default:\r\n+            node = null;\r\n+        }\r\n+        if (node) items.push(node);\r\n+      });\r\n+    });\r\n+    // 2列分组\r\n+    const rows: React.ReactNode[] = [];\r\n+    for (let i = 0; i < items.length; i += 2) {\r\n+      rows.push(\r\n+        <Row gutter={16} key={`row_${i / 2}`}>\r\n+          <Col span={12}>{items[i]}</Col>\r\n+          <Col span={12}>{items[i + 1] || null}</Col>\r\n+        </Row>\r\n+      );\r\n+    }\r\n+    return rows;\r\n+  };\r\n+\r\n   return (\r\n     <Card className=\"ffmpeg-panel\" title=\"FFmpeg 操作与配置\">\r\n       <Space style={{ marginBottom: 16 }}>\r\n         <Checkbox.Group\r\n@@ -124,56 +212,9 @@\n         form={form}\r\n         initialValues={paramValues}\r\n         onValuesChange={handleValuesChange}\r\n       >\r\n-        {selectedOperations.map((op) =>\r\n-          (OPERATION_SCHEMAS[op]?.params || []).map((param) => {\r\n-            const itemName = [op, param.name];\r\n-            const itemKey = `${op}_${param.name}`;\r\n-            switch (param.type) {\r\n-              case \"number\":\r\n-                return (\r\n-                  <Form.Item key={itemKey} label={param.label} name={itemName}>\r\n-                    <InputNumber\r\n-                      min={param.min}\r\n-                      max={param.max}\r\n-                      step={param.step || 1}\r\n-                      placeholder={param.placeholder}\r\n-                      style={{ width: \"100%\" }}\r\n-                    />\r\n-                  </Form.Item>\r\n-                );\r\n-              case \"select\":\r\n-                return (\r\n-                  <Form.Item key={itemKey} label={param.label} name={itemName}>\r\n-                    <Select\r\n-                      placeholder={param.placeholder}\r\n-                      options={param.options}\r\n-                    />\r\n-                  </Form.Item>\r\n-                );\r\n-              case \"text\":\r\n-                return (\r\n-                  <Form.Item key={itemKey} label={param.label} name={itemName}>\r\n-                    <Input placeholder={param.placeholder} />\r\n-                  </Form.Item>\r\n-                );\r\n-              case \"switch\":\r\n-                return (\r\n-                  <Form.Item\r\n-                    key={itemKey}\r\n-                    label={param.label}\r\n-                    name={itemName}\r\n-                    valuePropName=\"checked\"\r\n-                  >\r\n-                    <Switch />\r\n-                  </Form.Item>\r\n-                );\r\n-              default:\r\n-                return null;\r\n-            }\r\n-          })\r\n-        )}\r\n+        {renderParamItems()}\r\n         <Divider />\r\n         <Form.Item>\r\n           <Button type=\"primary\" disabled>\r\n             处理（仅UI，待对接）\r\n"
                },
                {
                    "date": 1748083857763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,91 +100,91 @@\n   useEffect(() => {\r\n     form.setFieldsValue(paramValues);\r\n   }, [paramValues, form]);\r\n \r\n-  // 渲染参数表单项，2列布局\r\n+  // 渲染参数表单项，按操作类型一行多列布局\r\n   const renderParamItems = () => {\r\n-    const items: React.ReactNode[] = [];\r\n+    const rows: React.ReactNode[] = [];\r\n     selectedOperations.forEach((op) => {\r\n-      (OPERATION_SCHEMAS[op]?.params || []).forEach((param) => {\r\n-        const itemName = [op, param.name];\r\n-        const itemKey = `${op}_${param.name}`;\r\n-        let node: React.ReactNode = null;\r\n-        switch (param.type) {\r\n-          case \"number\":\r\n-            node = (\r\n-              <Form.Item\r\n-                key={itemKey}\r\n-                label={param.label}\r\n-                name={itemName}\r\n-                style={{ marginBottom: 0 }}\r\n-              >\r\n-                <InputNumber\r\n-                  min={param.min}\r\n-                  max={param.max}\r\n-                  step={param.step || 1}\r\n-                  placeholder={param.placeholder}\r\n-                  style={{ width: \"100%\" }}\r\n-                />\r\n-              </Form.Item>\r\n+      const params = OPERATION_SCHEMAS[op]?.params || [];\r\n+      if (params.length === 0) return;\r\n+      rows.push(\r\n+        <Row gutter={16} key={`row_${op}`}>\r\n+          {params.map((param) => {\r\n+            const itemName = [op, param.name];\r\n+            const itemKey = `${op}_${param.name}`;\r\n+            let node: React.ReactNode = null;\r\n+            switch (param.type) {\r\n+              case \"number\":\r\n+                node = (\r\n+                  <Form.Item\r\n+                    key={itemKey}\r\n+                    label={param.label}\r\n+                    name={itemName}\r\n+                    style={{ marginBottom: 0 }}\r\n+                  >\r\n+                    <InputNumber\r\n+                      min={param.min}\r\n+                      max={param.max}\r\n+                      step={param.step || 1}\r\n+                      placeholder={param.placeholder}\r\n+                      style={{ width: \"100%\" }}\r\n+                    />\r\n+                  </Form.Item>\r\n+                );\r\n+                break;\r\n+              case \"select\":\r\n+                node = (\r\n+                  <Form.Item\r\n+                    key={itemKey}\r\n+                    label={param.label}\r\n+                    name={itemName}\r\n+                    style={{ marginBottom: 0 }}\r\n+                  >\r\n+                    <Select\r\n+                      placeholder={param.placeholder}\r\n+                      options={param.options}\r\n+                    />\r\n+                  </Form.Item>\r\n+                );\r\n+                break;\r\n+              case \"text\":\r\n+                node = (\r\n+                  <Form.Item\r\n+                    key={itemKey}\r\n+                    label={param.label}\r\n+                    name={itemName}\r\n+                    style={{ marginBottom: 0 }}\r\n+                  >\r\n+                    <Input placeholder={param.placeholder} />\r\n+                  </Form.Item>\r\n+                );\r\n+                break;\r\n+              case \"switch\":\r\n+                node = (\r\n+                  <Form.Item\r\n+                    key={itemKey}\r\n+                    label={param.label}\r\n+                    name={itemName}\r\n+                    valuePropName=\"checked\"\r\n+                    style={{ marginBottom: 0 }}\r\n+                  >\r\n+                    <Switch />\r\n+                  </Form.Item>\r\n+                );\r\n+                break;\r\n+              default:\r\n+                node = null;\r\n+            }\r\n+            return (\r\n+              <Col span={24 / params.length} key={itemKey}>\r\n+                {node}\r\n+              </Col>\r\n             );\r\n-            break;\r\n-          case \"select\":\r\n-            node = (\r\n-              <Form.Item\r\n-                key={itemKey}\r\n-                label={param.label}\r\n-                name={itemName}\r\n-                style={{ marginBottom: 0 }}\r\n-              >\r\n-                <Select\r\n-                  placeholder={param.placeholder}\r\n-                  options={param.options}\r\n-                />\r\n-              </Form.Item>\r\n-            );\r\n-            break;\r\n-          case \"text\":\r\n-            node = (\r\n-              <Form.Item\r\n-                key={itemKey}\r\n-                label={param.label}\r\n-                name={itemName}\r\n-                style={{ marginBottom: 0 }}\r\n-              >\r\n-                <Input placeholder={param.placeholder} />\r\n-              </Form.Item>\r\n-            );\r\n-            break;\r\n-          case \"switch\":\r\n-            node = (\r\n-              <Form.Item\r\n-                key={itemKey}\r\n-                label={param.label}\r\n-                name={itemName}\r\n-                valuePropName=\"checked\"\r\n-                style={{ marginBottom: 0 }}\r\n-              >\r\n-                <Switch />\r\n-              </Form.Item>\r\n-            );\r\n-            break;\r\n-          default:\r\n-            node = null;\r\n-        }\r\n-        if (node) items.push(node);\r\n-      });\r\n-    });\r\n-    // 2列分组\r\n-    const rows: React.ReactNode[] = [];\r\n-    for (let i = 0; i < items.length; i += 2) {\r\n-      rows.push(\r\n-        <Row gutter={16} key={`row_${i / 2}`}>\r\n-          <Col span={12}>{items[i]}</Col>\r\n-          <Col span={12}>{items[i + 1] || null}</Col>\r\n+          })}\r\n         </Row>\r\n       );\r\n-    }\r\n+    });\r\n     return rows;\r\n   };\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1748083945035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,91 +100,182 @@\n   useEffect(() => {\r\n     form.setFieldsValue(paramValues);\r\n   }, [paramValues, form]);\r\n \r\n-  // 渲染参数表单项，按操作类型一行多列布局\r\n+  // 渲染参数表单项，单参数项合并为每行最多2列\r\n   const renderParamItems = () => {\r\n     const rows: React.ReactNode[] = [];\r\n+    // 先收集所有操作类型的参数分组\r\n+    const paramGroups: React.ReactNode[][] = [];\r\n     selectedOperations.forEach((op) => {\r\n       const params = OPERATION_SCHEMAS[op]?.params || [];\r\n       if (params.length === 0) return;\r\n+      // 单参数的先暂存，后续合并\r\n+      if (params.length === 1) {\r\n+        const param = params[0];\r\n+        const itemName = [op, param.name];\r\n+        const itemKey = `${op}_${param.name}`;\r\n+        let node: React.ReactNode = null;\r\n+        switch (param.type) {\r\n+          case \"number\":\r\n+            node = (\r\n+              <Form.Item\r\n+                key={itemKey}\r\n+                label={param.label}\r\n+                name={itemName}\r\n+                style={{ marginBottom: 0 }}\r\n+              >\r\n+                <InputNumber\r\n+                  min={param.min}\r\n+                  max={param.max}\r\n+                  step={param.step || 1}\r\n+                  placeholder={param.placeholder}\r\n+                  style={{ width: \"100%\" }}\r\n+                />\r\n+              </Form.Item>\r\n+            );\r\n+            break;\r\n+          case \"select\":\r\n+            node = (\r\n+              <Form.Item\r\n+                key={itemKey}\r\n+                label={param.label}\r\n+                name={itemName}\r\n+                style={{ marginBottom: 0 }}\r\n+              >\r\n+                <Select\r\n+                  placeholder={param.placeholder}\r\n+                  options={param.options}\r\n+                />\r\n+              </Form.Item>\r\n+            );\r\n+            break;\r\n+          case \"text\":\r\n+            node = (\r\n+              <Form.Item\r\n+                key={itemKey}\r\n+                label={param.label}\r\n+                name={itemName}\r\n+                style={{ marginBottom: 0 }}\r\n+              >\r\n+                <Input placeholder={param.placeholder} />\r\n+              </Form.Item>\r\n+            );\r\n+            break;\r\n+          case \"switch\":\r\n+            node = (\r\n+              <Form.Item\r\n+                key={itemKey}\r\n+                label={param.label}\r\n+                name={itemName}\r\n+                valuePropName=\"checked\"\r\n+                style={{ marginBottom: 0 }}\r\n+              >\r\n+                <Switch />\r\n+              </Form.Item>\r\n+            );\r\n+            break;\r\n+          default:\r\n+            node = null;\r\n+        }\r\n+        if (node) paramGroups.push([node]);\r\n+      } else {\r\n+        // 多参数的直接一行\r\n+        const group: React.ReactNode[] = params.map((param) => {\r\n+          const itemName = [op, param.name];\r\n+          const itemKey = `${op}_${param.name}`;\r\n+          let node: React.ReactNode = null;\r\n+          switch (param.type) {\r\n+            case \"number\":\r\n+              node = (\r\n+                <Form.Item\r\n+                  key={itemKey}\r\n+                  label={param.label}\r\n+                  name={itemName}\r\n+                  style={{ marginBottom: 0 }}\r\n+                >\r\n+                  <InputNumber\r\n+                    min={param.min}\r\n+                    max={param.max}\r\n+                    step={param.step || 1}\r\n+                    placeholder={param.placeholder}\r\n+                    style={{ width: \"100%\" }}\r\n+                  />\r\n+                </Form.Item>\r\n+              );\r\n+              break;\r\n+            case \"select\":\r\n+              node = (\r\n+                <Form.Item\r\n+                  key={itemKey}\r\n+                  label={param.label}\r\n+                  name={itemName}\r\n+                  style={{ marginBottom: 0 }}\r\n+                >\r\n+                  <Select\r\n+                    placeholder={param.placeholder}\r\n+                    options={param.options}\r\n+                  />\r\n+                </Form.Item>\r\n+              );\r\n+              break;\r\n+            case \"text\":\r\n+              node = (\r\n+                <Form.Item\r\n+                  key={itemKey}\r\n+                  label={param.label}\r\n+                  name={itemName}\r\n+                  style={{ marginBottom: 0 }}\r\n+                >\r\n+                  <Input placeholder={param.placeholder} />\r\n+                </Form.Item>\r\n+              );\r\n+              break;\r\n+            case \"switch\":\r\n+              node = (\r\n+                <Form.Item\r\n+                  key={itemKey}\r\n+                  label={param.label}\r\n+                  name={itemName}\r\n+                  valuePropName=\"checked\"\r\n+                  style={{ marginBottom: 0 }}\r\n+                >\r\n+                  <Switch />\r\n+                </Form.Item>\r\n+              );\r\n+              break;\r\n+            default:\r\n+              node = null;\r\n+          }\r\n+          return (\r\n+            <Col span={24 / params.length} key={itemKey}>\r\n+              {node}\r\n+            </Col>\r\n+          );\r\n+        });\r\n+        paramGroups.push(group);\r\n+      }\r\n+    });\r\n+    // 合并所有单参数项，每行2个\r\n+    const singleParamItems = paramGroups.filter((g) => g.length === 1).flat();\r\n+    for (let i = 0; i < singleParamItems.length; i += 2) {\r\n       rows.push(\r\n-        <Row gutter={16} key={`row_${op}`}>\r\n-          {params.map((param) => {\r\n-            const itemName = [op, param.name];\r\n-            const itemKey = `${op}_${param.name}`;\r\n-            let node: React.ReactNode = null;\r\n-            switch (param.type) {\r\n-              case \"number\":\r\n-                node = (\r\n-                  <Form.Item\r\n-                    key={itemKey}\r\n-                    label={param.label}\r\n-                    name={itemName}\r\n-                    style={{ marginBottom: 0 }}\r\n-                  >\r\n-                    <InputNumber\r\n-                      min={param.min}\r\n-                      max={param.max}\r\n-                      step={param.step || 1}\r\n-                      placeholder={param.placeholder}\r\n-                      style={{ width: \"100%\" }}\r\n-                    />\r\n-                  </Form.Item>\r\n-                );\r\n-                break;\r\n-              case \"select\":\r\n-                node = (\r\n-                  <Form.Item\r\n-                    key={itemKey}\r\n-                    label={param.label}\r\n-                    name={itemName}\r\n-                    style={{ marginBottom: 0 }}\r\n-                  >\r\n-                    <Select\r\n-                      placeholder={param.placeholder}\r\n-                      options={param.options}\r\n-                    />\r\n-                  </Form.Item>\r\n-                );\r\n-                break;\r\n-              case \"text\":\r\n-                node = (\r\n-                  <Form.Item\r\n-                    key={itemKey}\r\n-                    label={param.label}\r\n-                    name={itemName}\r\n-                    style={{ marginBottom: 0 }}\r\n-                  >\r\n-                    <Input placeholder={param.placeholder} />\r\n-                  </Form.Item>\r\n-                );\r\n-                break;\r\n-              case \"switch\":\r\n-                node = (\r\n-                  <Form.Item\r\n-                    key={itemKey}\r\n-                    label={param.label}\r\n-                    name={itemName}\r\n-                    valuePropName=\"checked\"\r\n-                    style={{ marginBottom: 0 }}\r\n-                  >\r\n-                    <Switch />\r\n-                  </Form.Item>\r\n-                );\r\n-                break;\r\n-              default:\r\n-                node = null;\r\n-            }\r\n-            return (\r\n-              <Col span={24 / params.length} key={itemKey}>\r\n-                {node}\r\n-              </Col>\r\n-            );\r\n-          })}\r\n+        <Row gutter={16} key={`single_row_${i / 2}`}>\r\n+          <Col span={12}>{singleParamItems[i]}</Col>\r\n+          <Col span={12}>{singleParamItems[i + 1] || null}</Col>\r\n         </Row>\r\n       );\r\n-    });\r\n+    }\r\n+    // 多参数项直接渲染\r\n+    paramGroups\r\n+      .filter((g) => g.length > 1)\r\n+      .forEach((group, idx) => {\r\n+        rows.push(\r\n+          <Row gutter={16} key={`multi_row_${idx}`}>\r\n+            {group}\r\n+          </Row>\r\n+        );\r\n+      });\r\n     return rows;\r\n   };\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1748084336004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,28 @@\n   const [editingId, setEditingId] = useState<string | null>(null);\r\n   const [editingName, setEditingName] = useState(\"\");\r\n   const [newTplName, setNewTplName] = useState(\"\");\r\n \r\n+  // 2列分组Checkbox options\r\n+  const operationOptions = Object.entries(OPERATION_SCHEMAS).map(\r\n+    ([value, { label }]) => ({ label, value: value as FFmpegOperationType })\r\n+  );\r\n+  const colCount = 2;\r\n+  const rowCount = Math.ceil(operationOptions.length / colCount);\r\n+  const leftColOptions = operationOptions.slice(0, rowCount);\r\n+  const rightColOptions = operationOptions.slice(rowCount);\r\n+\r\n+  // 视觉顺序：左列选中的在前，右列选中的在后\r\n+  const getVisualSelectedOperations = () => {\r\n+    const left = leftColOptions\r\n+      .map((opt) => opt.value)\r\n+      .filter((v) => selectedOperations.includes(v));\r\n+    const right = rightColOptions\r\n+      .map((opt) => opt.value)\r\n+      .filter((v) => selectedOperations.includes(v));\r\n+    return [...left, ...right];\r\n+  };\r\n+\r\n   // 处理参数表单变更\r\n   const handleValuesChange = (_changed: ParamValues, all: ParamValues) => {\r\n     setParamValues(all);\r\n   };\r\n@@ -101,16 +121,16 @@\n     form.setFieldsValue(paramValues);\r\n   }, [paramValues, form]);\r\n \r\n   // 渲染参数表单项，单参数项合并为每行最多2列\r\n-  const renderParamItems = () => {\r\n+  const renderParamItems = (\r\n+    visualSelectedOperations: FFmpegOperationType[]\r\n+  ) => {\r\n     const rows: React.ReactNode[] = [];\r\n-    // 先收集所有操作类型的参数分组\r\n     const paramGroups: React.ReactNode[][] = [];\r\n-    selectedOperations.forEach((op) => {\r\n+    visualSelectedOperations.forEach((op) => {\r\n       const params = OPERATION_SCHEMAS[op]?.params || [];\r\n       if (params.length === 0) return;\r\n-      // 单参数的先暂存，后续合并\r\n       if (params.length === 1) {\r\n         const param = params[0];\r\n         const itemName = [op, param.name];\r\n         const itemKey = `${op}_${param.name}`;\r\n@@ -178,9 +198,8 @@\n             node = null;\r\n         }\r\n         if (node) paramGroups.push([node]);\r\n       } else {\r\n-        // 多参数的直接一行\r\n         const group: React.ReactNode[] = params.map((param) => {\r\n           const itemName = [op, param.name];\r\n           const itemKey = `${op}_${param.name}`;\r\n           let node: React.ReactNode = null;\r\n@@ -279,33 +298,40 @@\n   };\r\n \r\n   return (\r\n     <Card className=\"ffmpeg-panel\" title=\"FFmpeg 操作与配置\">\r\n-      <Space style={{ marginBottom: 16 }}>\r\n-        <Checkbox.Group\r\n-          options={Object.entries(OPERATION_SCHEMAS).map(\r\n-            ([value, { label }]) => ({\r\n-              label,\r\n-              value: value as FFmpegOperationType,\r\n-            })\r\n-          )}\r\n-          value={selectedOperations}\r\n-          onChange={handleOperationChange}\r\n-        />\r\n+      <div style={{ marginBottom: 16 }}>\r\n+        <Row gutter={16}>\r\n+          <Col span={12}>\r\n+            <Checkbox.Group\r\n+              options={leftColOptions}\r\n+              value={selectedOperations}\r\n+              onChange={handleOperationChange}\r\n+            />\r\n+          </Col>\r\n+          <Col span={12}>\r\n+            <Checkbox.Group\r\n+              options={rightColOptions}\r\n+              value={selectedOperations}\r\n+              onChange={handleOperationChange}\r\n+            />\r\n+          </Col>\r\n+        </Row>\r\n         <Button\r\n+          style={{ marginTop: 8 }}\r\n           onClick={handleSaveTemplate}\r\n           disabled={selectedOperations.length === 0}\r\n         >\r\n           模板\r\n         </Button>\r\n-      </Space>\r\n+      </div>\r\n       <Form\r\n         layout=\"vertical\"\r\n         form={form}\r\n         initialValues={paramValues}\r\n         onValuesChange={handleValuesChange}\r\n       >\r\n-        {renderParamItems()}\r\n+        {renderParamItems(getVisualSelectedOperations())}\r\n         <Divider />\r\n         <Form.Item>\r\n           <Button type=\"primary\" disabled>\r\n             处理（仅UI，待对接）\r\n"
                },
                {
                    "date": 1748084347802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,8 @@\n   Modal,\r\n   Popconfirm,\r\n   Row,\r\n   Select,\r\n-  Space,\r\n   Switch,\r\n   message,\r\n } from \"antd\";\r\n import React, { useEffect, useState } from \"react\";\r\n"
                },
                {
                    "date": 1748084513168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,26 +46,35 @@\n   const [editingId, setEditingId] = useState<string | null>(null);\r\n   const [editingName, setEditingName] = useState(\"\");\r\n   const [newTplName, setNewTplName] = useState(\"\");\r\n \r\n-  // 2列分组Checkbox options\r\n-  const operationOptions = Object.entries(OPERATION_SCHEMAS).map(\r\n-    ([value, { label }]) => ({ label, value: value as FFmpegOperationType })\r\n-  );\r\n-  const colCount = 2;\r\n-  const rowCount = Math.ceil(operationOptions.length / colCount);\r\n-  const leftColOptions = operationOptions.slice(0, rowCount);\r\n-  const rightColOptions = operationOptions.slice(rowCount);\r\n+  // 视频与音频操作类型分组\r\n+  const videoOps: FFmpegOperationType[] = [\r\n+    \"scale\",\r\n+    \"compress\",\r\n+    \"crop\",\r\n+    \"clip-segment\",\r\n+    \"watermark\",\r\n+    \"convert\",\r\n+    \"framerate\",\r\n+    \"gif\",\r\n+    \"cover\",\r\n+  ];\r\n+  const audioOps: FFmpegOperationType[] = [\"extract-audio\", \"volume\"];\r\n+  const videoOptions = videoOps.map((op) => ({\r\n+    label: OPERATION_SCHEMAS[op].label,\r\n+    value: op,\r\n+  }));\r\n+  const audioOptions = audioOps.map((op) => ({\r\n+    label: OPERATION_SCHEMAS[op].label,\r\n+    value: op,\r\n+  }));\r\n \r\n-  // 视觉顺序：左列选中的在前，右列选中的在后\r\n+  // 视觉顺序：视频选中的在前，音频选中的在后\r\n   const getVisualSelectedOperations = () => {\r\n-    const left = leftColOptions\r\n-      .map((opt) => opt.value)\r\n-      .filter((v) => selectedOperations.includes(v));\r\n-    const right = rightColOptions\r\n-      .map((opt) => opt.value)\r\n-      .filter((v) => selectedOperations.includes(v));\r\n-    return [...left, ...right];\r\n+    const video = videoOps.filter((v) => selectedOperations.includes(v));\r\n+    const audio = audioOps.filter((v) => selectedOperations.includes(v));\r\n+    return [...video, ...audio];\r\n   };\r\n \r\n   // 处理参数表单变更\r\n   const handleValuesChange = (_changed: ParamValues, all: ParamValues) => {\r\n@@ -298,19 +307,21 @@\n \r\n   return (\r\n     <Card className=\"ffmpeg-panel\" title=\"FFmpeg 操作与配置\">\r\n       <div style={{ marginBottom: 16 }}>\r\n-        <Row gutter={16}>\r\n+        <Row gutter={32} align=\"top\">\r\n           <Col span={12}>\r\n+            <div style={{ fontWeight: \"bold\", marginBottom: 4 }}>视频操作</div>\r\n             <Checkbox.Group\r\n-              options={leftColOptions}\r\n+              options={videoOptions}\r\n               value={selectedOperations}\r\n               onChange={handleOperationChange}\r\n             />\r\n           </Col>\r\n           <Col span={12}>\r\n+            <div style={{ fontWeight: \"bold\", marginBottom: 4 }}>音频操作</div>\r\n             <Checkbox.Group\r\n-              options={rightColOptions}\r\n+              options={audioOptions}\r\n               value={selectedOperations}\r\n               onChange={handleOperationChange}\r\n             />\r\n           </Col>\r\n"
                },
                {
                    "date": 1748084610608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,14 @@\n     label: OPERATION_SCHEMAS[op].label,\r\n     value: op,\r\n   }));\r\n \r\n+  // 视频操作分两列纵向排列\r\n+  const videoColCount = 2;\r\n+  const videoRowCount = Math.ceil(videoOptions.length / videoColCount);\r\n+  const videoCol1 = videoOptions.slice(0, videoRowCount);\r\n+  const videoCol2 = videoOptions.slice(videoRowCount);\r\n+\r\n   // 视觉顺序：视频选中的在前，音频选中的在后\r\n   const getVisualSelectedOperations = () => {\r\n     const video = videoOps.filter((v) => selectedOperations.includes(v));\r\n     const audio = audioOps.filter((v) => selectedOperations.includes(v));\r\n@@ -310,20 +316,34 @@\n       <div style={{ marginBottom: 16 }}>\r\n         <Row gutter={32} align=\"top\">\r\n           <Col span={12}>\r\n             <div style={{ fontWeight: \"bold\", marginBottom: 4 }}>视频操作</div>\r\n-            <Checkbox.Group\r\n-              options={videoOptions}\r\n-              value={selectedOperations}\r\n-              onChange={handleOperationChange}\r\n-            />\r\n+            <Row>\r\n+              <Col span={12}>\r\n+                <Checkbox.Group\r\n+                  options={videoCol1}\r\n+                  value={selectedOperations}\r\n+                  onChange={handleOperationChange}\r\n+                  style={{ display: \"flex\", flexDirection: \"column\" }}\r\n+                />\r\n+              </Col>\r\n+              <Col span={12}>\r\n+                <Checkbox.Group\r\n+                  options={videoCol2}\r\n+                  value={selectedOperations}\r\n+                  onChange={handleOperationChange}\r\n+                  style={{ display: \"flex\", flexDirection: \"column\" }}\r\n+                />\r\n+              </Col>\r\n+            </Row>\r\n           </Col>\r\n           <Col span={12}>\r\n             <div style={{ fontWeight: \"bold\", marginBottom: 4 }}>音频操作</div>\r\n             <Checkbox.Group\r\n               options={audioOptions}\r\n               value={selectedOperations}\r\n               onChange={handleOperationChange}\r\n+              style={{ display: \"flex\", flexDirection: \"column\" }}\r\n             />\r\n           </Col>\r\n         </Row>\r\n         <Button\r\n"
                },
                {
                    "date": 1748084870224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,8 +310,22 @@\n       });\r\n     return rows;\r\n   };\r\n \r\n+  // 检查参数名冲突\r\n+  function getParamNameConflicts(\r\n+    visualSelectedOperations: FFmpegOperationType[]\r\n+  ) {\r\n+    const nameMap: Record<string, string[]> = {};\r\n+    visualSelectedOperations.forEach((op) => {\r\n+      (OPERATION_SCHEMAS[op]?.params || []).forEach((param) => {\r\n+        if (!nameMap[param.name]) nameMap[param.name] = [];\r\n+        nameMap[param.name].push(OPERATION_SCHEMAS[op].label);\r\n+      });\r\n+    });\r\n+    return Object.entries(nameMap).filter(([_, arr]) => arr.length > 1);\r\n+  }\r\n+\r\n   return (\r\n     <Card className=\"ffmpeg-panel\" title=\"FFmpeg 操作与配置\">\r\n       <div style={{ marginBottom: 16 }}>\r\n         <Row gutter={32} align=\"top\">\r\n@@ -359,10 +373,36 @@\n         form={form}\r\n         initialValues={paramValues}\r\n         onValuesChange={handleValuesChange}\r\n       >\r\n+        <Alert\r\n+          message=\"操作将按勾选顺序依次执行，参数请合理组合。\"\r\n+          type=\"info\"\r\n+          showIcon\r\n+          style={{ marginBottom: 16 }}\r\n+        />\r\n         {renderParamItems(getVisualSelectedOperations())}\r\n         <Divider />\r\n+        {getParamNameConflicts(getVisualSelectedOperations()).length > 0 && (\r\n+          <Alert\r\n+            message={\r\n+              <span>\r\n+                存在参数名冲突：\r\n+                {getParamNameConflicts(getVisualSelectedOperations()).map(\r\n+                  ([name, arr]) => (\r\n+                    <span key={name} style={{ marginLeft: 8 }}>\r\n+                      <b>{name}</b>（{arr.join(\"、\")}）\r\n+                    </span>\r\n+                  )\r\n+                )}\r\n+                ，请注意参数不会互相覆盖。\r\n+              </span>\r\n+            }\r\n+            type=\"warning\"\r\n+            showIcon\r\n+            style={{ marginBottom: 16 }}\r\n+          />\r\n+        )}\r\n         <Form.Item>\r\n           <Button type=\"primary\" disabled>\r\n             处理（仅UI，待对接）\r\n           </Button>\r\n"
                },
                {
                    "date": 1748084879584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -321,9 +321,9 @@\n         if (!nameMap[param.name]) nameMap[param.name] = [];\r\n         nameMap[param.name].push(OPERATION_SCHEMAS[op].label);\r\n       });\r\n     });\r\n-    return Object.entries(nameMap).filter(([_, arr]) => arr.length > 1);\r\n+    return Object.entries(nameMap).filter(([, arr]) => arr.length > 1);\r\n   }\r\n \r\n   return (\r\n     <Card className=\"ffmpeg-panel\" title=\"FFmpeg 操作与配置\">\r\n"
                },
                {
                    "date": 1748085045501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,41 +46,42 @@\n   const [editingId, setEditingId] = useState<string | null>(null);\r\n   const [editingName, setEditingName] = useState(\"\");\r\n   const [newTplName, setNewTplName] = useState(\"\");\r\n \r\n-  // 视频与音频操作类型分组\r\n-  const videoOps: FFmpegOperationType[] = [\r\n+  // 视频处理操作（可多选）与格式转换操作（互斥）分组\r\n+  const videoProcessOps: FFmpegOperationType[] = [\r\n     \"scale\",\r\n     \"compress\",\r\n     \"crop\",\r\n     \"clip-segment\",\r\n     \"watermark\",\r\n-    \"convert\",\r\n     \"framerate\",\r\n     \"gif\",\r\n     \"cover\",\r\n   ];\r\n+  const formatConvertOp: FFmpegOperationType = \"convert\";\r\n   const audioOps: FFmpegOperationType[] = [\"extract-audio\", \"volume\"];\r\n-  const videoOptions = videoOps.map((op) => ({\r\n+  const videoProcessOptions = videoProcessOps.map((op) => ({\r\n     label: OPERATION_SCHEMAS[op].label,\r\n     value: op,\r\n   }));\r\n+  const formatConvertOption = {\r\n+    label: OPERATION_SCHEMAS[formatConvertOp].label,\r\n+    value: formatConvertOp,\r\n+  };\r\n   const audioOptions = audioOps.map((op) => ({\r\n     label: OPERATION_SCHEMAS[op].label,\r\n     value: op,\r\n   }));\r\n \r\n-  // 视频操作分两列纵向排列\r\n-  const videoColCount = 2;\r\n-  const videoRowCount = Math.ceil(videoOptions.length / videoColCount);\r\n-  const videoCol1 = videoOptions.slice(0, videoRowCount);\r\n-  const videoCol2 = videoOptions.slice(videoRowCount);\r\n-\r\n-  // 视觉顺序：视频选中的在前，音频选中的在后\r\n+  // 视觉顺序：视频处理、格式转换、音频\r\n   const getVisualSelectedOperations = () => {\r\n-    const video = videoOps.filter((v) => selectedOperations.includes(v));\r\n+    const video = videoProcessOps.filter((v) => selectedOperations.includes(v));\r\n+    const format = selectedOperations.includes(formatConvertOp)\r\n+      ? [formatConvertOp]\r\n+      : [];\r\n     const audio = audioOps.filter((v) => selectedOperations.includes(v));\r\n-    return [...video, ...audio];\r\n+    return [...video, ...format, ...audio];\r\n   };\r\n \r\n   // 处理参数表单变更\r\n   const handleValuesChange = (_changed: ParamValues, all: ParamValues) => {\r\n@@ -88,9 +89,20 @@\n   };\r\n \r\n   // 处理操作类型多选\r\n   const handleOperationChange = (ops: Array<FFmpegOperationType>) => {\r\n-    setSelectedOperations(ops);\r\n+    let newOps = [...ops];\r\n+    if (newOps.includes(formatConvertOp)) {\r\n+      // 只保留格式转换和音频操作\r\n+      newOps = [formatConvertOp, ...audioOps.filter((a) => newOps.includes(a))];\r\n+    } else {\r\n+      // 只保留视频处理和音频操作\r\n+      newOps = [\r\n+        ...videoProcessOps.filter((v) => newOps.includes(v)),\r\n+        ...audioOps.filter((a) => newOps.includes(a)),\r\n+      ];\r\n+    }\r\n+    setSelectedOperations(newOps);\r\n     form.resetFields();\r\n     setParamValues({});\r\n   };\r\n \r\n@@ -328,30 +340,55 @@\n   return (\r\n     <Card className=\"ffmpeg-panel\" title=\"FFmpeg 操作与配置\">\r\n       <div style={{ marginBottom: 16 }}>\r\n         <Row gutter={32} align=\"top\">\r\n-          <Col span={12}>\r\n-            <div style={{ fontWeight: \"bold\", marginBottom: 4 }}>视频操作</div>\r\n-            <Row>\r\n-              <Col span={12}>\r\n-                <Checkbox.Group\r\n-                  options={videoCol1}\r\n-                  value={selectedOperations}\r\n-                  onChange={handleOperationChange}\r\n-                  style={{ display: \"flex\", flexDirection: \"column\" }}\r\n-                />\r\n-              </Col>\r\n-              <Col span={12}>\r\n-                <Checkbox.Group\r\n-                  options={videoCol2}\r\n-                  value={selectedOperations}\r\n-                  onChange={handleOperationChange}\r\n-                  style={{ display: \"flex\", flexDirection: \"column\" }}\r\n-                />\r\n-              </Col>\r\n-            </Row>\r\n+          <Col span={10}>\r\n+            <div style={{ fontWeight: \"bold\", marginBottom: 4 }}>\r\n+              视频处理操作\r\n+            </div>\r\n+            <Checkbox.Group\r\n+              options={videoProcessOptions}\r\n+              value={selectedOperations}\r\n+              onChange={handleOperationChange}\r\n+              style={{ display: \"flex\", flexDirection: \"column\" }}\r\n+              disabled={selectedOperations.includes(formatConvertOp)}\r\n+            />\r\n           </Col>\r\n-          <Col span={12}>\r\n+          <Col\r\n+            span={4}\r\n+            style={{\r\n+              borderLeft: \"1px solid #eee\",\r\n+              borderRight: \"1px solid #eee\",\r\n+              padding: \"0 12px\",\r\n+            }}\r\n+          >\r\n+            <div\r\n+              style={{ fontWeight: \"bold\", marginBottom: 4, color: \"#faad14\" }}\r\n+            >\r\n+              格式转换（互斥）\r\n+            </div>\r\n+            <Checkbox\r\n+              checked={selectedOperations.includes(formatConvertOp)}\r\n+              onChange={(e) => {\r\n+                if (e.target.checked) {\r\n+                  handleOperationChange([\r\n+                    formatConvertOp,\r\n+                    ...selectedOperations.filter((op) => audioOps.includes(op)),\r\n+                  ]);\r\n+                } else {\r\n+                  handleOperationChange(\r\n+                    selectedOperations.filter((op) => op !== formatConvertOp)\r\n+                  );\r\n+                }\r\n+              }}\r\n+            >\r\n+              {formatConvertOption.label}\r\n+            </Checkbox>\r\n+            <div style={{ fontSize: 12, color: \"#faad14\", marginTop: 4 }}>\r\n+              与左侧视频处理操作互斥\r\n+            </div>\r\n+          </Col>\r\n+          <Col span={10}>\r\n             <div style={{ fontWeight: \"bold\", marginBottom: 4 }}>音频操作</div>\r\n             <Checkbox.Group\r\n               options={audioOptions}\r\n               value={selectedOperations}\r\n"
                },
                {
                    "date": 1748085294514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -340,30 +340,22 @@\n   return (\r\n     <Card className=\"ffmpeg-panel\" title=\"FFmpeg 操作与配置\">\r\n       <div style={{ marginBottom: 16 }}>\r\n         <Row gutter={32} align=\"top\">\r\n-          <Col span={10}>\r\n+          <Col span={12}>\r\n             <div style={{ fontWeight: \"bold\", marginBottom: 4 }}>\r\n-              视频处理操作\r\n+              视频相关操作\r\n             </div>\r\n             <Checkbox.Group\r\n               options={videoProcessOptions}\r\n               value={selectedOperations}\r\n               onChange={handleOperationChange}\r\n               style={{ display: \"flex\", flexDirection: \"column\" }}\r\n               disabled={selectedOperations.includes(formatConvertOp)}\r\n             />\r\n-          </Col>\r\n-          <Col\r\n-            span={4}\r\n-            style={{\r\n-              borderLeft: \"1px solid #eee\",\r\n-              borderRight: \"1px solid #eee\",\r\n-              padding: \"0 12px\",\r\n-            }}\r\n-          >\r\n+            <Divider style={{ margin: \"16px 0 8px 0\" }} />\r\n             <div\r\n-              style={{ fontWeight: \"bold\", marginBottom: 4, color: \"#faad14\" }}\r\n+              style={{ fontWeight: \"bold\", color: \"#faad14\", marginBottom: 4 }}\r\n             >\r\n               格式转换（互斥）\r\n             </div>\r\n             <Checkbox\r\n@@ -382,13 +374,20 @@\n               }}\r\n             >\r\n               {formatConvertOption.label}\r\n             </Checkbox>\r\n-            <div style={{ fontSize: 12, color: \"#faad14\", marginTop: 4 }}>\r\n-              与左侧视频处理操作互斥\r\n+            <div\r\n+              style={{\r\n+                fontSize: 13,\r\n+                color: \"#faad14\",\r\n+                marginTop: 4,\r\n+                fontWeight: \"bold\",\r\n+              }}\r\n+            >\r\n+              与上方视频操作互斥，二者不可同时选择\r\n             </div>\r\n           </Col>\r\n-          <Col span={10}>\r\n+          <Col span={12}>\r\n             <div style={{ fontWeight: \"bold\", marginBottom: 4 }}>音频操作</div>\r\n             <Checkbox.Group\r\n               options={audioOptions}\r\n               value={selectedOperations}\r\n"
                },
                {
                    "date": 1748085342922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -355,9 +355,9 @@\n             <Divider style={{ margin: \"16px 0 8px 0\" }} />\r\n             <div\r\n               style={{ fontWeight: \"bold\", color: \"#faad14\", marginBottom: 4 }}\r\n             >\r\n-              格式转换（互斥）\r\n+              格式转换\r\n             </div>\r\n             <Checkbox\r\n               checked={selectedOperations.includes(formatConvertOp)}\r\n               onChange={(e) => {\r\n"
                },
                {
                    "date": 1748085356527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -372,20 +372,20 @@\n                   );\r\n                 }\r\n               }}\r\n             >\r\n-              {formatConvertOption.label}\r\n+              {formatConvertOption.label}{\" \"}\r\n+              <div\r\n+                style={{\r\n+                  fontSize: 13,\r\n+                  color: \"#faad14\",\r\n+                  marginTop: 4,\r\n+                  fontWeight: \"bold\",\r\n+                }}\r\n+              >\r\n+                与上方视频操作互斥，二者不可同时选择\r\n+              </div>\r\n             </Checkbox>\r\n-            <div\r\n-              style={{\r\n-                fontSize: 13,\r\n-                color: \"#faad14\",\r\n-                marginTop: 4,\r\n-                fontWeight: \"bold\",\r\n-              }}\r\n-            >\r\n-              与上方视频操作互斥，二者不可同时选择\r\n-            </div>\r\n           </Col>\r\n           <Col span={12}>\r\n             <div style={{ fontWeight: \"bold\", marginBottom: 4 }}>音频操作</div>\r\n             <Checkbox.Group\r\n"
                },
                {
                    "date": 1748085366884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -373,18 +373,18 @@\n                 }\r\n               }}\r\n             >\r\n               {formatConvertOption.label}{\" \"}\r\n-              <div\r\n+              <span\r\n                 style={{\r\n                   fontSize: 13,\r\n                   color: \"#faad14\",\r\n                   marginTop: 4,\r\n                   fontWeight: \"bold\",\r\n                 }}\r\n               >\r\n                 与上方视频操作互斥，二者不可同时选择\r\n-              </div>\r\n+              </span>\r\n             </Checkbox>\r\n           </Col>\r\n           <Col span={12}>\r\n             <div style={{ fontWeight: \"bold\", marginBottom: 4 }}>音频操作</div>\r\n"
                },
                {
                    "date": 1748085376251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -373,18 +373,8 @@\n                 }\r\n               }}\r\n             >\r\n               {formatConvertOption.label}{\" \"}\r\n-              <span\r\n-                style={{\r\n-                  fontSize: 13,\r\n-                  color: \"#faad14\",\r\n-                  marginTop: 4,\r\n-                  fontWeight: \"bold\",\r\n-                }}\r\n-              >\r\n-                与上方视频操作互斥，二者不可同时选择\r\n-              </span>\r\n             </Checkbox>\r\n           </Col>\r\n           <Col span={12}>\r\n             <div style={{ fontWeight: \"bold\", marginBottom: 4 }}>音频操作</div>\r\n"
                },
                {
                    "date": 1748085390944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -352,13 +352,9 @@\n               style={{ display: \"flex\", flexDirection: \"column\" }}\r\n               disabled={selectedOperations.includes(formatConvertOp)}\r\n             />\r\n             <Divider style={{ margin: \"16px 0 8px 0\" }} />\r\n-            <div\r\n-              style={{ fontWeight: \"bold\", color: \"#faad14\", marginBottom: 4 }}\r\n-            >\r\n-              格式转换\r\n-            </div>\r\n+            <div style={{ fontWeight: \"bold\", marginBottom: 4 }}>格式转换</div>\r\n             <Checkbox\r\n               checked={selectedOperations.includes(formatConvertOp)}\r\n               onChange={(e) => {\r\n                 if (e.target.checked) {\r\n"
                },
                {
                    "date": 1748085397688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -341,11 +341,9 @@\n     <Card className=\"ffmpeg-panel\" title=\"FFmpeg 操作与配置\">\r\n       <div style={{ marginBottom: 16 }}>\r\n         <Row gutter={32} align=\"top\">\r\n           <Col span={12}>\r\n-            <div style={{ fontWeight: \"bold\", marginBottom: 4 }}>\r\n-              视频相关操作\r\n-            </div>\r\n+            <div style={{ fontWeight: \"bold\", marginBottom: 4 }}>视频操作</div>\r\n             <Checkbox.Group\r\n               options={videoProcessOptions}\r\n               value={selectedOperations}\r\n               onChange={handleOperationChange}\r\n"
                },
                {
                    "date": 1748085411911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -393,14 +393,8 @@\n         form={form}\r\n         initialValues={paramValues}\r\n         onValuesChange={handleValuesChange}\r\n       >\r\n-        <Alert\r\n-          message=\"操作将按勾选顺序依次执行，参数请合理组合。\"\r\n-          type=\"info\"\r\n-          showIcon\r\n-          style={{ marginBottom: 16 }}\r\n-        />\r\n         {renderParamItems(getVisualSelectedOperations())}\r\n         <Divider />\r\n         {getParamNameConflicts(getVisualSelectedOperations()).length > 0 && (\r\n           <Alert\r\n"
                },
                {
                    "date": 1748085431581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -422,13 +422,9 @@\n           </Button>\r\n         </Form.Item>\r\n       </Form>\r\n       <Divider />\r\n-      <Alert\r\n-        message=\"处理进度与结果将在此展示（UI占位）\"\r\n-        type=\"info\"\r\n-        showIcon\r\n-      />\r\n+\r\n       <Modal\r\n         title=\"模板管理\"\r\n         open={modalOpen}\r\n         onCancel={() => {\r\n"
                },
                {
                    "date": 1748085462226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -415,13 +415,9 @@\n             showIcon\r\n             style={{ marginBottom: 16 }}\r\n           />\r\n         )}\r\n-        <Form.Item>\r\n-          <Button type=\"primary\" disabled>\r\n-            处理（仅UI，待对接）\r\n-          </Button>\r\n-        </Form.Item>\r\n+        <Form.Item></Form.Item>\r\n       </Form>\r\n       <Divider />\r\n \r\n       <Modal\r\n"
                },
                {
                    "date": 1748085507205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -380,8 +380,9 @@\n             />\r\n           </Col>\r\n         </Row>\r\n         <Button\r\n+          type=\"primary\"\r\n           style={{ marginTop: 8 }}\r\n           onClick={handleSaveTemplate}\r\n           disabled={selectedOperations.length === 0}\r\n         >\r\n"
                },
                {
                    "date": 1748085870737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,24 @@\n         ...videoProcessOps.filter((v) => newOps.includes(v)),\r\n         ...audioOps.filter((a) => newOps.includes(a)),\r\n       ];\r\n     }\r\n+    // 参数名冲突检测\r\n+    const paramNames: Record<string, string> = {};\r\n+    for (const op of newOps) {\r\n+      const params = OPERATION_SCHEMAS[op]?.params || [];\r\n+      for (const param of params) {\r\n+        if (paramNames[param.name]) {\r\n+          message.warning(\r\n+            `操作“${OPERATION_SCHEMAS[op].label}”与“${\r\n+              paramNames[param.name]\r\n+            }”参数名（${param.name}）冲突，不能同时选择！`\r\n+          );\r\n+          return; // 阻止本次选择\r\n+        }\r\n+        paramNames[param.name] = OPERATION_SCHEMAS[op].label;\r\n+      }\r\n+    }\r\n     setSelectedOperations(newOps);\r\n     form.resetFields();\r\n     setParamValues({});\r\n   };\r\n"
                },
                {
                    "date": 1748085982424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,11 +107,11 @@\n       const params = OPERATION_SCHEMAS[op]?.params || [];\r\n       for (const param of params) {\r\n         if (paramNames[param.name]) {\r\n           message.warning(\r\n-            `操作“${OPERATION_SCHEMAS[op].label}”与“${\r\n+            `操作\"${OPERATION_SCHEMAS[op].label}\"与\"${\r\n               paramNames[param.name]\r\n-            }”参数名（${param.name}）冲突，不能同时选择！`\r\n+            }\"参数名（${param.name}）冲突，不能同时选择！`\r\n           );\r\n           return; // 阻止本次选择\r\n         }\r\n         paramNames[param.name] = OPERATION_SCHEMAS[op].label;\r\n@@ -162,29 +162,44 @@\n   useEffect(() => {\r\n     form.setFieldsValue(paramValues);\r\n   }, [paramValues, form]);\r\n \r\n-  // 渲染参数表单项，单参数项合并为每行最多2列\r\n+  // 渲染参数表单项，2列布局，带校验\r\n   const renderParamItems = (\r\n     visualSelectedOperations: FFmpegOperationType[]\r\n   ) => {\r\n-    const rows: React.ReactNode[] = [];\r\n-    const paramGroups: React.ReactNode[][] = [];\r\n+    const items: React.ReactNode[] = [];\r\n     visualSelectedOperations.forEach((op) => {\r\n-      const params = OPERATION_SCHEMAS[op]?.params || [];\r\n-      if (params.length === 0) return;\r\n-      if (params.length === 1) {\r\n-        const param = params[0];\r\n+      (OPERATION_SCHEMAS[op]?.params || []).forEach((param) => {\r\n         const itemName = [op, param.name];\r\n         const itemKey = `${op}_${param.name}`;\r\n+        // 动态生成rules\r\n+        const rules = [{ required: true, message: `请输入${param.label}` }];\r\n+        if (param.type === \"number\") {\r\n+          if (param.min !== undefined) {\r\n+            rules.push({\r\n+              type: \"number\",\r\n+              min: param.min,\r\n+              message: `${param.label}不能小于${param.min}`,\r\n+            });\r\n+          }\r\n+          if (param.max !== undefined) {\r\n+            rules.push({\r\n+              type: \"number\",\r\n+              max: param.max,\r\n+              message: `${param.label}不能大于${param.max}`,\r\n+            });\r\n+          }\r\n+        }\r\n         let node: React.ReactNode = null;\r\n         switch (param.type) {\r\n           case \"number\":\r\n             node = (\r\n               <Form.Item\r\n                 key={itemKey}\r\n                 label={param.label}\r\n                 name={itemName}\r\n+                rules={rules}\r\n                 style={{ marginBottom: 0 }}\r\n               >\r\n                 <InputNumber\r\n                   min={param.min}\r\n@@ -201,8 +216,9 @@\n               <Form.Item\r\n                 key={itemKey}\r\n                 label={param.label}\r\n                 name={itemName}\r\n+                rules={rules}\r\n                 style={{ marginBottom: 0 }}\r\n               >\r\n                 <Select\r\n                   placeholder={param.placeholder}\r\n@@ -216,8 +232,9 @@\n               <Form.Item\r\n                 key={itemKey}\r\n                 label={param.label}\r\n                 name={itemName}\r\n+                rules={rules}\r\n                 style={{ marginBottom: 0 }}\r\n               >\r\n                 <Input placeholder={param.placeholder} />\r\n               </Form.Item>\r\n@@ -229,8 +246,9 @@\n                 key={itemKey}\r\n                 label={param.label}\r\n                 name={itemName}\r\n                 valuePropName=\"checked\"\r\n+                rules={rules}\r\n                 style={{ marginBottom: 0 }}\r\n               >\r\n                 <Switch />\r\n               </Form.Item>\r\n@@ -238,105 +256,21 @@\n             break;\r\n           default:\r\n             node = null;\r\n         }\r\n-        if (node) paramGroups.push([node]);\r\n-      } else {\r\n-        const group: React.ReactNode[] = params.map((param) => {\r\n-          const itemName = [op, param.name];\r\n-          const itemKey = `${op}_${param.name}`;\r\n-          let node: React.ReactNode = null;\r\n-          switch (param.type) {\r\n-            case \"number\":\r\n-              node = (\r\n-                <Form.Item\r\n-                  key={itemKey}\r\n-                  label={param.label}\r\n-                  name={itemName}\r\n-                  style={{ marginBottom: 0 }}\r\n-                >\r\n-                  <InputNumber\r\n-                    min={param.min}\r\n-                    max={param.max}\r\n-                    step={param.step || 1}\r\n-                    placeholder={param.placeholder}\r\n-                    style={{ width: \"100%\" }}\r\n-                  />\r\n-                </Form.Item>\r\n-              );\r\n-              break;\r\n-            case \"select\":\r\n-              node = (\r\n-                <Form.Item\r\n-                  key={itemKey}\r\n-                  label={param.label}\r\n-                  name={itemName}\r\n-                  style={{ marginBottom: 0 }}\r\n-                >\r\n-                  <Select\r\n-                    placeholder={param.placeholder}\r\n-                    options={param.options}\r\n-                  />\r\n-                </Form.Item>\r\n-              );\r\n-              break;\r\n-            case \"text\":\r\n-              node = (\r\n-                <Form.Item\r\n-                  key={itemKey}\r\n-                  label={param.label}\r\n-                  name={itemName}\r\n-                  style={{ marginBottom: 0 }}\r\n-                >\r\n-                  <Input placeholder={param.placeholder} />\r\n-                </Form.Item>\r\n-              );\r\n-              break;\r\n-            case \"switch\":\r\n-              node = (\r\n-                <Form.Item\r\n-                  key={itemKey}\r\n-                  label={param.label}\r\n-                  name={itemName}\r\n-                  valuePropName=\"checked\"\r\n-                  style={{ marginBottom: 0 }}\r\n-                >\r\n-                  <Switch />\r\n-                </Form.Item>\r\n-              );\r\n-              break;\r\n-            default:\r\n-              node = null;\r\n-          }\r\n-          return (\r\n-            <Col span={24 / params.length} key={itemKey}>\r\n-              {node}\r\n-            </Col>\r\n-          );\r\n-        });\r\n-        paramGroups.push(group);\r\n-      }\r\n+        if (node) items.push(node);\r\n+      });\r\n     });\r\n-    // 合并所有单参数项，每行2个\r\n-    const singleParamItems = paramGroups.filter((g) => g.length === 1).flat();\r\n-    for (let i = 0; i < singleParamItems.length; i += 2) {\r\n+    // 2列分组\r\n+    const rows: React.ReactNode[] = [];\r\n+    for (let i = 0; i < items.length; i += 2) {\r\n       rows.push(\r\n-        <Row gutter={16} key={`single_row_${i / 2}`}>\r\n-          <Col span={12}>{singleParamItems[i]}</Col>\r\n-          <Col span={12}>{singleParamItems[i + 1] || null}</Col>\r\n+        <Row gutter={16} key={`row_${i / 2}`}>\r\n+          <Col span={12}>{items[i]}</Col>\r\n+          <Col span={12}>{items[i + 1] || null}</Col>\r\n         </Row>\r\n       );\r\n     }\r\n-    // 多参数项直接渲染\r\n-    paramGroups\r\n-      .filter((g) => g.length > 1)\r\n-      .forEach((group, idx) => {\r\n-        rows.push(\r\n-          <Row gutter={16} key={`multi_row_${idx}`}>\r\n-            {group}\r\n-          </Row>\r\n-        );\r\n-      });\r\n     return rows;\r\n   };\r\n \r\n   // 检查参数名冲突\r\n"
                },
                {
                    "date": 1748085994382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,18 +176,24 @@\n         const rules = [{ required: true, message: `请输入${param.label}` }];\r\n         if (param.type === \"number\") {\r\n           if (param.min !== undefined) {\r\n             rules.push({\r\n-              type: \"number\",\r\n-              min: param.min,\r\n-              message: `${param.label}不能小于${param.min}`,\r\n+              validator: (_: any, value: any) =>\r\n+                value === undefined || value >= param.min\r\n+                  ? Promise.resolve()\r\n+                  : Promise.reject(\r\n+                      new Error(`${param.label}不能小于${param.min}`)\r\n+                    ),\r\n             });\r\n           }\r\n           if (param.max !== undefined) {\r\n             rules.push({\r\n-              type: \"number\",\r\n-              max: param.max,\r\n-              message: `${param.label}不能大于${param.max}`,\r\n+              validator: (_: any, value: any) =>\r\n+                value === undefined || value <= param.max\r\n+                  ? Promise.resolve()\r\n+                  : Promise.reject(\r\n+                      new Error(`${param.label}不能大于${param.max}`)\r\n+                    ),\r\n             });\r\n           }\r\n         }\r\n         let node: React.ReactNode = null;\r\n"
                },
                {
                    "date": 1748086002016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,11 @@\n       (OPERATION_SCHEMAS[op]?.params || []).forEach((param) => {\r\n         const itemName = [op, param.name];\r\n         const itemKey = `${op}_${param.name}`;\r\n         // 动态生成rules\r\n-        const rules = [{ required: true, message: `请输入${param.label}` }];\r\n+        const rules: any[] = [\r\n+          { required: true, message: `请输入${param.label}` },\r\n+        ];\r\n         if (param.type === \"number\") {\r\n           if (param.min !== undefined) {\r\n             rules.push({\r\n               validator: (_: any, value: any) =>\r\n"
                },
                {
                    "date": 1748086013068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n   Switch,\r\n   message,\r\n } from \"antd\";\r\n import React, { useEffect, useState } from \"react\";\r\n+import type { Rule, RuleObject } from \"antd/es/form\";\r\n \r\n import { FFmpegOperationType } from \"./types\";\r\n import { OPERATION_SCHEMAS } from \"./schemas\";\r\n import { useFFmpegPanelStore } from \"./store\";\r\n@@ -172,15 +173,15 @@\n       (OPERATION_SCHEMAS[op]?.params || []).forEach((param) => {\r\n         const itemName = [op, param.name];\r\n         const itemKey = `${op}_${param.name}`;\r\n         // 动态生成rules\r\n-        const rules: any[] = [\r\n+        const rules: Rule[] = [\r\n           { required: true, message: `请输入${param.label}` },\r\n         ];\r\n         if (param.type === \"number\") {\r\n           if (param.min !== undefined) {\r\n             rules.push({\r\n-              validator: (_: any, value: any) =>\r\n+              validator: (_: RuleObject, value: any) =>\r\n                 value === undefined || value >= param.min\r\n                   ? Promise.resolve()\r\n                   : Promise.reject(\r\n                       new Error(`${param.label}不能小于${param.min}`)\r\n@@ -188,9 +189,9 @@\n             });\r\n           }\r\n           if (param.max !== undefined) {\r\n             rules.push({\r\n-              validator: (_: any, value: any) =>\r\n+              validator: (_: RuleObject, value: any) =>\r\n                 value === undefined || value <= param.max\r\n                   ? Promise.resolve()\r\n                   : Promise.reject(\r\n                       new Error(`${param.label}不能大于${param.max}`)\r\n"
                },
                {
                    "date": 1748086022030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,9 +179,12 @@\n         ];\r\n         if (param.type === \"number\") {\r\n           if (param.min !== undefined) {\r\n             rules.push({\r\n-              validator: (_: RuleObject, value: any) =>\r\n+              validator: (\r\n+                _: RuleObject,\r\n+                value: number | string | boolean | undefined\r\n+              ) =>\r\n                 value === undefined || value >= param.min\r\n                   ? Promise.resolve()\r\n                   : Promise.reject(\r\n                       new Error(`${param.label}不能小于${param.min}`)\r\n@@ -189,9 +192,12 @@\n             });\r\n           }\r\n           if (param.max !== undefined) {\r\n             rules.push({\r\n-              validator: (_: RuleObject, value: any) =>\r\n+              validator: (\r\n+                _: RuleObject,\r\n+                value: number | string | boolean | undefined\r\n+              ) =>\r\n                 value === undefined || value <= param.max\r\n                   ? Promise.resolve()\r\n                   : Promise.reject(\r\n                       new Error(`${param.label}不能大于${param.max}`)\r\n"
                },
                {
                    "date": 1748086034634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,9 +183,9 @@\n               validator: (\r\n                 _: RuleObject,\r\n                 value: number | string | boolean | undefined\r\n               ) =>\r\n-                value === undefined || Number(value) >= param.min\r\n+                value === undefined || Number(value) >= param.min!\r\n                   ? Promise.resolve()\r\n                   : Promise.reject(\r\n                       new Error(`${param.label}不能小于${param.min}`)\r\n                     ),\r\n@@ -196,9 +196,9 @@\n               validator: (\r\n                 _: RuleObject,\r\n                 value: number | string | boolean | undefined\r\n               ) =>\r\n-                value === undefined || Number(value) <= param.max\r\n+                value === undefined || Number(value) <= param.max!\r\n                   ? Promise.resolve()\r\n                   : Promise.reject(\r\n                       new Error(`${param.label}不能大于${param.max}`)\r\n                     ),\r\n"
                },
                {
                    "date": 1748086150170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,15 @@\n     setModalOpen(true);\r\n   };\r\n \r\n   // 新建模板\r\n-  const handleCreateTemplate = () => {\r\n+  const handleCreateTemplate = async () => {\r\n+    try {\r\n+      await form.validateFields(); // 校验所有参数\r\n+    } catch {\r\n+      message.error(\"请先正确填写所有参数，再保存模板！\");\r\n+      return;\r\n+    }\r\n     if (!newTplName.trim()) {\r\n       message.warning(\"请输入模板名称\");\r\n       return;\r\n     }\r\n"
                }
            ],
            "date": 1748065540477,
            "name": "Commit-0",
            "content": "import './style.less';\r\n\r\nimport { Alert, Button, Card, Divider, Form, InputNumber, Select } from 'antd';\r\nimport React, { useState } from 'react';\r\n\r\nconst { Option } = Select;\r\n\r\nconst OPERATION_OPTIONS = [\r\n  { label: '视频缩放', value: 'scale' },\r\n  { label: '视频压缩', value: 'compress' },\r\n  { label: '转出音频', value: 'extract-audio' },\r\n  // 可扩展更多操作类型\r\n];\r\n\r\nconst FFmpegPanel: React.FC = () => {\r\n  const [operation, setOperation] = useState('scale');\r\n\r\n  // 参数区UI根据操作类型动态切换\r\n  const renderParams = () => {\r\n    switch (operation) {\r\n      case 'scale':\r\n        return (\r\n          <>\r\n            <Form.Item label=\"目标宽度\" name=\"width\">\r\n              <InputNumber min={1} placeholder=\"如 1280\" style={{ width: '100%' }} />\r\n            </Form.Item>\r\n            <Form.Item label=\"目标高度\" name=\"height\">\r\n              <InputNumber min={1} placeholder=\"如 720\" style={{ width: '100%' }} />\r\n            </Form.Item>\r\n          </>\r\n        );\r\n      case 'compress':\r\n        return (\r\n          <>\r\n            <Form.Item label=\"目标码率(kbps)\" name=\"bitrate\">\r\n              <InputNumber min={100} placeholder=\"如 800\" style={{ width: '100%' }} />\r\n            </Form.Item>\r\n          </>\r\n        );\r\n      case 'extract-audio':\r\n        return (\r\n          <>\r\n            <Form.Item label=\"音频格式\" name=\"audioFormat\">\r\n              <Select placeholder=\"选择格式\">\r\n                <Option value=\"mp3\">MP3</Option>\r\n                <Option value=\"aac\">AAC</Option>\r\n                <Option value=\"wav\">WAV</Option>\r\n              </Select>\r\n            </Form.Item>\r\n          </>\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className=\"ffmpeg-panel\" title=\"FFmpeg 操作与配置\">\r\n      <Form layout=\"vertical\">\r\n        <Form.Item label=\"操作类型\" name=\"operation\">\r\n          <Select\r\n            value={operation}\r\n            onChange={setOperation}\r\n            options={OPERATION_OPTIONS}\r\n            style={{ width: '100%' }}\r\n          />\r\n        </Form.Item>\r\n        {renderParams()}\r\n        <Divider />\r\n        <Form.Item>\r\n          <Button type=\"primary\" disabled>开始处理（待实现）</Button>\r\n        </Form.Item>\r\n      </Form>\r\n      <Divider />\r\n      <Alert message=\"处理进度与结果将在此展示（UI占位）\" type=\"info\" showIcon />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default FFmpegPanel;"
        }
    ]
}