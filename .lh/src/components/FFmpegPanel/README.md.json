{
    "sourceFile": "src/components/FFmpegPanel/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1748082835883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1748082835883,
            "name": "Commit-0",
            "content": "# FFmpegPanel 目录与功能规划\r\n\r\n## 目录结构建议\r\n\r\n- FFmpegPanel/\r\n  - index.tsx // 主 UI 组件，仅负责参数设置与操作类型选择\r\n  - style.less // 样式文件\r\n  - store.ts // zustand 模板与全局状态管理\r\n  - schemas.ts // 操作类型与参数 schema 定义\r\n  - templates/ // 预设模板管理（如可选的默认模板 JSON）\r\n  - api.ts // 后续对接后端接口的 API 封装\r\n  - types.ts // 类型定义\r\n  - README.md // 说明文档（本文件）\r\n\r\n## 功能模块说明\r\n\r\n1. **参数设置与操作类型选择（index.tsx）**\r\n\r\n   - 支持多操作类型复选，参数区动态合并渲染\r\n   - 仅 UI 逻辑，不涉及上传与后端\r\n\r\n2. **模板管理（store.ts, templates/）**\r\n\r\n   - 使用 zustand 管理模板列表、当前模板、参数状态\r\n   - 支持模板的增删改查、应用、重命名\r\n\r\n3. **参数 schema（schemas.ts）**\r\n\r\n   - 所有操作类型与参数结构抽象为 schema，便于动态渲染和扩展\r\n\r\n4. **类型定义（types.ts）**\r\n\r\n   - 统一参数、模板、操作类型等 TS 类型\r\n\r\n5. **接口对接（api.ts）**\r\n   - 预留与后端对接的 API 方法（如获取模板、保存模板、提交处理任务等）\r\n\r\n## 后续对接数据接口建议\r\n\r\n- api.ts 中定义 RESTful 接口方法，便于后续与后端联调\r\n- store.ts 中异步 action 可调用 api.ts 方法，实现模板的持久化、参数的远程获取等\r\n\r\n---\r\n\r\n如需详细代码结构或某模块实现，请在此基础上补充！\r\n"
        }
    ]
}