{
    "sourceFile": "src/components/FFmpegPanel/store.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1748082922295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748083673340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,16 @@\n import { FFmpegOperationType, FFmpegTemplate } from \"./types\";\r\n \r\n import { create } from \"zustand\";\r\n+import { persist } from \"zustand/middleware\";\r\n \r\n interface FFmpegPanelState {\r\n   selectedOperations: FFmpegOperationType[];\r\n-  paramValues: Record<string, any>;\r\n+  paramValues: Record<string, Record<string, unknown>>;\r\n   templates: FFmpegTemplate[];\r\n   currentTemplateId: string | null;\r\n   setSelectedOperations: (ops: FFmpegOperationType[]) => void;\r\n-  setParamValues: (values: Record<string, any>) => void;\r\n+  setParamValues: (values: Record<string, Record<string, unknown>>) => void;\r\n   saveTemplate: (\r\n     tpl: Omit<FFmpegTemplate, \"id\" | \"createdAt\" | \"updatedAt\">\r\n   ) => void;\r\n   deleteTemplate: (id: string) => void;\r\n@@ -18,41 +19,49 @@\n   fetchTemplates?: () => Promise<void>;\r\n   saveTemplateToServer?: (tpl: FFmpegTemplate) => Promise<void>;\r\n }\r\n \r\n-export const useFFmpegPanelStore = create<FFmpegPanelState>((set, get) => ({\r\n-  selectedOperations: [],\r\n-  paramValues: {},\r\n-  templates: [],\r\n-  currentTemplateId: null,\r\n-  setSelectedOperations: (ops) => set({ selectedOperations: ops }),\r\n-  setParamValues: (values) => set({ paramValues: values }),\r\n-  saveTemplate: (tpl) => {\r\n-    const id = Date.now().toString();\r\n-    const now = Date.now();\r\n-    set((state) => ({\r\n-      templates: [\r\n-        ...state.templates,\r\n-        { ...tpl, id, createdAt: now, updatedAt: now },\r\n-      ],\r\n-    }));\r\n-  },\r\n-  deleteTemplate: (id) =>\r\n-    set((state) => ({\r\n-      templates: state.templates.filter((t) => t.id !== id),\r\n-      currentTemplateId:\r\n-        state.currentTemplateId === id ? null : state.currentTemplateId,\r\n-    })),\r\n-  applyTemplate: (id) => {\r\n-    const tpl = get().templates.find((t) => t.id === id);\r\n-    if (tpl) {\r\n-      set({\r\n-        selectedOperations: tpl.operations,\r\n-        paramValues: tpl.params,\r\n-        currentTemplateId: id,\r\n-      });\r\n+export const useFFmpegPanelStore = create<FFmpegPanelState>()(\r\n+  persist(\r\n+    (set, get) => ({\r\n+      selectedOperations: [],\r\n+      paramValues: {},\r\n+      templates: [],\r\n+      currentTemplateId: null,\r\n+      setSelectedOperations: (ops) => set({ selectedOperations: ops }),\r\n+      setParamValues: (values) => set({ paramValues: values }),\r\n+      saveTemplate: (tpl) => {\r\n+        const id = Date.now().toString();\r\n+        const now = Date.now();\r\n+        set((state) => ({\r\n+          templates: [\r\n+            ...state.templates,\r\n+            { ...tpl, id, createdAt: now, updatedAt: now },\r\n+          ],\r\n+        }));\r\n+      },\r\n+      deleteTemplate: (id) =>\r\n+        set((state) => ({\r\n+          templates: state.templates.filter((t) => t.id !== id),\r\n+          currentTemplateId:\r\n+            state.currentTemplateId === id ? null : state.currentTemplateId,\r\n+        })),\r\n+      applyTemplate: (id) => {\r\n+        const tpl = get().templates.find((t) => t.id === id);\r\n+        if (tpl) {\r\n+          set({\r\n+            selectedOperations: tpl.operations,\r\n+            paramValues: tpl.params,\r\n+            currentTemplateId: id,\r\n+          });\r\n+        }\r\n+      },\r\n+      // 预留异步action\r\n+      fetchTemplates: undefined,\r\n+      saveTemplateToServer: undefined,\r\n+    }),\r\n+    {\r\n+      name: \"ffmpeg-panel-store\",\r\n+      partialize: (state) => ({ templates: state.templates }),\r\n     }\r\n-  },\r\n-  // 预留异步action\r\n-  fetchTemplates: undefined,\r\n-  saveTemplateToServer: undefined,\r\n-}));\r\n+  )\r\n+);\r\n"
                },
                {
                    "date": 1748086993404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,67 +0,0 @@\n-import { FFmpegOperationType, FFmpegTemplate } from \"./types\";\r\n-\r\n-import { create } from \"zustand\";\r\n-import { persist } from \"zustand/middleware\";\r\n-\r\n-interface FFmpegPanelState {\r\n-  selectedOperations: FFmpegOperationType[];\r\n-  paramValues: Record<string, Record<string, unknown>>;\r\n-  templates: FFmpegTemplate[];\r\n-  currentTemplateId: string | null;\r\n-  setSelectedOperations: (ops: FFmpegOperationType[]) => void;\r\n-  setParamValues: (values: Record<string, Record<string, unknown>>) => void;\r\n-  saveTemplate: (\r\n-    tpl: Omit<FFmpegTemplate, \"id\" | \"createdAt\" | \"updatedAt\">\r\n-  ) => void;\r\n-  deleteTemplate: (id: string) => void;\r\n-  applyTemplate: (id: string) => void;\r\n-  // 预留异步action\r\n-  fetchTemplates?: () => Promise<void>;\r\n-  saveTemplateToServer?: (tpl: FFmpegTemplate) => Promise<void>;\r\n-}\r\n-\r\n-export const useFFmpegPanelStore = create<FFmpegPanelState>()(\r\n-  persist(\r\n-    (set, get) => ({\r\n-      selectedOperations: [],\r\n-      paramValues: {},\r\n-      templates: [],\r\n-      currentTemplateId: null,\r\n-      setSelectedOperations: (ops) => set({ selectedOperations: ops }),\r\n-      setParamValues: (values) => set({ paramValues: values }),\r\n-      saveTemplate: (tpl) => {\r\n-        const id = Date.now().toString();\r\n-        const now = Date.now();\r\n-        set((state) => ({\r\n-          templates: [\r\n-            ...state.templates,\r\n-            { ...tpl, id, createdAt: now, updatedAt: now },\r\n-          ],\r\n-        }));\r\n-      },\r\n-      deleteTemplate: (id) =>\r\n-        set((state) => ({\r\n-          templates: state.templates.filter((t) => t.id !== id),\r\n-          currentTemplateId:\r\n-            state.currentTemplateId === id ? null : state.currentTemplateId,\r\n-        })),\r\n-      applyTemplate: (id) => {\r\n-        const tpl = get().templates.find((t) => t.id === id);\r\n-        if (tpl) {\r\n-          set({\r\n-            selectedOperations: tpl.operations,\r\n-            paramValues: tpl.params,\r\n-            currentTemplateId: id,\r\n-          });\r\n-        }\r\n-      },\r\n-      // 预留异步action\r\n-      fetchTemplates: undefined,\r\n-      saveTemplateToServer: undefined,\r\n-    }),\r\n-    {\r\n-      name: \"ffmpeg-panel-store\",\r\n-      partialize: (state) => ({ templates: state.templates }),\r\n-    }\r\n-  )\r\n-);\r\n\\ No newline at end of file\n"
                }
            ],
            "date": 1748082922295,
            "name": "Commit-0",
            "content": "import { FFmpegOperationType, FFmpegTemplate } from \"./types\";\r\n\r\nimport { create } from \"zustand\";\r\n\r\ninterface FFmpegPanelState {\r\n  selectedOperations: FFmpegOperationType[];\r\n  paramValues: Record<string, any>;\r\n  templates: FFmpegTemplate[];\r\n  currentTemplateId: string | null;\r\n  setSelectedOperations: (ops: FFmpegOperationType[]) => void;\r\n  setParamValues: (values: Record<string, any>) => void;\r\n  saveTemplate: (\r\n    tpl: Omit<FFmpegTemplate, \"id\" | \"createdAt\" | \"updatedAt\">\r\n  ) => void;\r\n  deleteTemplate: (id: string) => void;\r\n  applyTemplate: (id: string) => void;\r\n  // 预留异步action\r\n  fetchTemplates?: () => Promise<void>;\r\n  saveTemplateToServer?: (tpl: FFmpegTemplate) => Promise<void>;\r\n}\r\n\r\nexport const useFFmpegPanelStore = create<FFmpegPanelState>((set, get) => ({\r\n  selectedOperations: [],\r\n  paramValues: {},\r\n  templates: [],\r\n  currentTemplateId: null,\r\n  setSelectedOperations: (ops) => set({ selectedOperations: ops }),\r\n  setParamValues: (values) => set({ paramValues: values }),\r\n  saveTemplate: (tpl) => {\r\n    const id = Date.now().toString();\r\n    const now = Date.now();\r\n    set((state) => ({\r\n      templates: [\r\n        ...state.templates,\r\n        { ...tpl, id, createdAt: now, updatedAt: now },\r\n      ],\r\n    }));\r\n  },\r\n  deleteTemplate: (id) =>\r\n    set((state) => ({\r\n      templates: state.templates.filter((t) => t.id !== id),\r\n      currentTemplateId:\r\n        state.currentTemplateId === id ? null : state.currentTemplateId,\r\n    })),\r\n  applyTemplate: (id) => {\r\n    const tpl = get().templates.find((t) => t.id === id);\r\n    if (tpl) {\r\n      set({\r\n        selectedOperations: tpl.operations,\r\n        paramValues: tpl.params,\r\n        currentTemplateId: id,\r\n      });\r\n    }\r\n  },\r\n  // 预留异步action\r\n  fetchTemplates: undefined,\r\n  saveTemplateToServer: undefined,\r\n}));\r\n"
        }
    ]
}