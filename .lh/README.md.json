{
    "sourceFile": "README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1748101384241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748101409874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,55 +1,4 @@\n-# React + TypeScript + Vite\n-\n-This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.\n-\n-Currently, two official plugins are available:\n-\n-- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh\n-- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh\n-\n-## Expanding the ESLint configuration\n-\n-If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:\n-\n-- Configure the top-level `parserOptions` property like this:\n-\n-```js\n-export default tseslint.config({\n-  languageOptions: {\n-    // other options...\n-    parserOptions: {\n-      project: [\"./tsconfig.node.json\", \"./tsconfig.app.json\"],\n-      tsconfigRootDir: import.meta.dirname,\n-    },\n-  },\n-});\n-```\n-\n-- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`\n-- Optionally add `...tseslint.configs.stylisticTypeChecked`\n-- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:\n-\n-```js\n-// eslint.config.js\n-import react from \"eslint-plugin-react\";\n-\n-export default tseslint.config({\n-  // Set the react version\n-  settings: { react: { version: \"18.3\" } },\n-  plugins: {\n-    // Add the react plugin\n-    react,\n-  },\n-  rules: {\n-    // other rules...\n-    // Enable its recommended rules\n-    ...react.configs.recommended.rules,\n-    ...react.configs[\"jsx-runtime\"].rules,\n-  },\n-});\n-```\n-\n # FFmpeg 转换模块接口说明\n \n 本文档旨在为后端开发人员提供 FFmpeg 转换模块接口所需的参数和操作说明。\n \n"
                }
            ],
            "date": 1748101384241,
            "name": "Commit-0",
            "content": "# React + TypeScript + Vite\n\nThis template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.\n\nCurrently, two official plugins are available:\n\n- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh\n- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh\n\n## Expanding the ESLint configuration\n\nIf you are developing a production application, we recommend updating the configuration to enable type aware lint rules:\n\n- Configure the top-level `parserOptions` property like this:\n\n```js\nexport default tseslint.config({\n  languageOptions: {\n    // other options...\n    parserOptions: {\n      project: ['./tsconfig.node.json', './tsconfig.app.json'],\n      tsconfigRootDir: import.meta.dirname,\n    },\n  },\n})\n```\n\n- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`\n- Optionally add `...tseslint.configs.stylisticTypeChecked`\n- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:\n\n```js\n// eslint.config.js\nimport react from 'eslint-plugin-react'\n\nexport default tseslint.config({\n  // Set the react version\n  settings: { react: { version: '18.3' } },\n  plugins: {\n    // Add the react plugin\n    react,\n  },\n  rules: {\n    // other rules...\n    // Enable its recommended rules\n    ...react.configs.recommended.rules,\n    ...react.configs['jsx-runtime'].rules,\n  },\n})\n```\n\n# FFmpeg 转换模块接口说明\n\n本文档旨在为后端开发人员提供 FFmpeg 转换模块接口所需的参数和操作说明。\n\n前端在调用 FFmpeg 转换接口时，会提交一个 JSON 格式的数据载荷，其结构如下：\n\n```json\n{\n  \"file\": {\n    \"file_id\": \"[后端返回的文件唯一ID]\",\n    \"name\": \"[文件名]\"\n    // ... 其他可能需要的文件信息\n  },\n  \"operations\": [\"operation1\", \"operation2\", ...], // 选中的操作类型列表\n  \"params\": { // 各操作的参数值\n    \"operation1\": { \"param1\": value1, \"param2\": value2, ... },\n    \"operation2\": { \"param3\": value3, ... }\n    // ... 其他操作的参数\n  }\n}\n```\n\n## Operation (操作类型) 说明\n\n`operations` 字段是一个字符串数组，包含用户选择的 FFmpeg 操作类型。后端需要根据这些操作类型执行相应的 FFmpeg 命令。可能的操作类型包括：\n\n- `scale`: 视频缩放\n- `compress`: 视频压缩\n- `extract-audio`: 转出音频\n- `crop`: 裁剪\n- `clip-segment`: 截取片段\n- `watermark`: 加水印\n- `convert`: 格式转换\n- `framerate`: 帧率调整\n- `volume`: 音量调整\n- `gif`: 视频转GIF\n- `cover`: 提取封面\n\n## Params (参数) 说明\n\n`params` 字段是一个嵌套的 JSON 对象，其键是操作类型，值是该操作对应的参数对象。参数对象的键是参数名称，值是参数的值。以下是每个操作可能包含的参数：\n\n### `scale` (视频缩放)\n\n- `width`: 目标宽度 (number, >= 1)\n- `height`: 目标高度 (number, >= 1)\n\n### `compress` (视频压缩)\n\n- `bitrate`: 目标码率(kbps) (number, >= 100)\n\n### `extract-audio` (转出音频)\n\n- `audioFormat`: 音频格式 (string, 可选值: \"mp3\", \"aac\", \"wav\")\n\n### `crop` (裁剪)\n\n- `x`: 起始X (number, >= 0)\n- `y`: 起始Y (number, >= 0)\n- `width`: 宽度 (number, >= 1)\n- `height`: 高度 (number, >= 1)\n\n### `clip-segment` (截取片段)\n\n- `start`: 起始时间(秒) (number, >= 0)\n- `duration`: 持续时长(秒) (number, >= 1)\n\n### `watermark` (加水印)\n\n- `watermarkText`: 水印文字 (string)\n- `fontSize`: 字体大小 (number, >= 10)\n- `opacity`: 透明度(0-1) (number, >= 0, <= 1, 步长 0.1)\n\n### `convert` (格式转换)\n\n- `format`: 目标格式 (string, 可选值: \"mp4\", \"avi\", \"mov\", \"mkv\", \"flv\")\n\n### `framerate` (帧率调整)\n\n- `fps`: 目标帧率 (number, >= 1, <= 120)\n\n### `volume` (音量调整)\n\n- `volume`: 音量倍数 (number, >= 0, <= 10, 步长 0.1)\n\n### `gif` (视频转GIF)\n\n- `start`: 起始时间(秒) (number, >= 0)\n- `duration`: 持续时长(秒) (number, >= 1)\n\n### `cover` (提取封面)\n\n- `time`: 时间点(秒) (number, >= 0)\n\n请后端开发人员根据上述操作类型和参数说明，实现相应的 FFmpeg 命令生成逻辑。\n"
        }
    ]
}